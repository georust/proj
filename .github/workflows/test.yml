on: push
name: proj ci
jobs:
  # The `ci-result` job doesn't actually test anything - it just aggregates the
  # overall build status for bors, otherwise our bors.toml would need an entry
  # for each individual job produced by the job-matrix.
  #
  # Ref: https://github.com/rust-lang/crater/blob/9ab6f9697c901c4a44025cf0a39b73ad5b37d198/.github/workflows/bors.yml#L125-L149
  #
  # ALL THE SUBSEQUENT JOBS NEED THEIR `name` ADDED TO THE `needs` SECTION OF THIS JOB!
  ci-result:
    name: ci result
    runs-on: ubuntu-latest
    needs:
      - proj-ubuntu
      - proj-sys-ubuntu
      - proj-macos
      - proj-sys-macos
      - proj-sys-windows
    steps:
      - name: Mark the job as a success
        if: success()
        run: exit 0
      - name: Mark the job as a failure
        if: "!success()"
        run: exit 1
  proj-ubuntu:
    name: proj ubuntu
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        container_image: ["georust/proj-ci:rust-1.49", "georust/proj-ci:rust-1.50"]
        features: 
          - ""
          - "--features network"
          - "--features bundled_proj"
          - "--no-default-features"
          - "--features \"network bundled_proj\""
          - "--features \"network geo-types\""
          - "--features \"bundled_proj geo-types\""
          - "--features \"bundled_proj bundled_proj_tiff \""
          - "--features \"network bundled_proj geo-types\""
    container:
      image: ${{ matrix.container_image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - run: cargo build ${{ matrix.features }}
      - run: cargo test ${{ matrix.features }}

  proj-macos:
    name: proj macos
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: macos-latest
    strategy:
      matrix:
        features: ["", "--features network"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - run: cargo build ${{ matrix.features }}
      - run: cargo test ${{ matrix.features }}

  proj-sys-ubuntu:
    name: proj-sys ubuntu
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: proj-sys
    container: ${{ matrix.container }}
    strategy:
      matrix:
        include:
          - container:
              image: georust/proj-ci:rust-1.50
              env:
                _PROJ_SYS_TEST_EXPECT_BUILD_FROM_SRC: 0
            features: ""
          - container:
              image: georust/proj-ci:rust-1.49
              env:
                _PROJ_SYS_TEST_EXPECT_BUILD_FROM_SRC: 0
            features: ""
          - container:
              image: georust/proj-ci:rust-1.50
              env:
                _PROJ_SYS_TEST_EXPECT_BUILD_FROM_SRC: 1
            features: "--features bundled_proj"
          - container:
              image: georust/proj-ci:rust-1.49
              env:
                _PROJ_SYS_TEST_EXPECT_BUILD_FROM_SRC: 1
            features: "--features bundled_proj"
          - container:
              image: georust/proj-ci-without-system-proj:rust-1.50
              env:
                _PROJ_SYS_TEST_EXPECT_BUILD_FROM_SRC: 1
            features: ""
          - container:
              image: georust/proj-ci-without-system-proj:rust-1.49
              env:
                _PROJ_SYS_TEST_EXPECT_BUILD_FROM_SRC: 1
            features: ""
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - run: cargo build ${{ matrix.features }}
      - run: cargo test ${{ matrix.features }}

  proj-sys-macos:
    name: proj-sys macos
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: macos-latest
    env:
      _PROJ_SYS_TEST_EXPECT_BUILD_FROM_SRC: 0
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - run: brew install proj
      - run: cargo test ${{ matrix.features }}

  proj-sys-windows:
    name: proj-sys windows
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: windows-latest
    env:
      _PROJ_SYS_TEST_EXPECT_BUILD_FROM_SRC: 0
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              target: "x86_64-pc-windows-msvc",
              VCPKG_DEFAULT_TRIPLET: "x64-windows-static",
              RUSTFLAGS: "-Ctarget-feature=+crt-static",
              features: "",
            }
          - {
              target: "x86_64-pc-windows-msvc",
              VCPKG_DEFAULT_TRIPLET: "x64-windows-static-md",
              features: "",
            }
          - {
              target: "x86_64-pc-windows-msvc",
              VCPKG_DEFAULT_TRIPLET: "x64-windows",
              VCPKGRS_DYNAMIC: 1,
              # "cargo test --doc" broken with dynamic lib on CI machine (missing dll)
              features: "--all-targets",
            }
          # - {
              # target: "i686-pc-windows-msvc",
              # VCPKG_DEFAULT_TRIPLET: "x86-windows-static",
              # RUSTFLAGS: "-Ctarget-feature=+crt-static",
              # features: "",
            # }
          # - {
              # target: "i686-pc-windows-msvc",
              # VCPKG_DEFAULT_TRIPLET: "x86-windows-static-md",
              # features: "",
            # }
          # - {
              # target: "i686-pc-windows-msvc",
              # VCPKG_DEFAULT_TRIPLET: "x86-windows",
              # VCPKGRS_DYNAMIC: 1,
              # features: "--all-targets",
            # }
    steps:
      - uses: actions/checkout@v2
      - name: Install vcpkg
        run: |
          git clone https://github.com/Microsoft/vcpkg.git vcp
          # PROJ version 7.2.1 - https://github.com/microsoft/vcpkg/search?q=proj4&type=commits
          git -C vcp checkout 8fe4184c6a17e237d8b864b6d10e0b520334a093
          vcp\bootstrap-vcpkg.bat -disableMetrics
      - name: Set env
        shell: bash
        run: echo "VCPKG_ROOT=${{ github.workspace }}\vcp" >> $GITHUB_ENV
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "10.0"
          directory: ${{ runner.temp }}/llvm
      - name: Set LIBCLANG_PATH
        run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
      - name: install proj lib
        env:
          VCPKG_DEFAULT_TRIPLET: "${{ matrix.config.VCPKG_DEFAULT_TRIPLET }}"
        shell: bash
        run: |
          set -ex
          echo VCPKG_ROOT=${VCPKG_ROOT}
          ${VCPKG_ROOT}/vcpkg install proj
      - name: Run integration tests
        env:
          VCPKG_DEFAULT_TRIPLET: "${{ matrix.config.VCPKG_DEFAULT_TRIPLET }}"
          RUSTFLAGS: ${{ matrix.config.RUSTFLAGS }}
        shell: bash
        run: |
          set -ex
          rustup target add ${{ matrix.config.target }}
          rustc --version
          cargo --version
          echo dyn=${{ matrix.config.VCPKGRS_DYNAMIC }}
          if [ '${{ matrix.config.VCPKGRS_DYNAMIC }}' != '' ] ; then export VCPKGRS_DYNAMIC=1 ; fi
          cargo build --target ${{ matrix.config.target }} ${{ matrix.config.features }}
          cargo test --target ${{ matrix.config.target }} ${{ matrix.config.features }}
