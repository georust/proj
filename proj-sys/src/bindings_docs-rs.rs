/* THESE ARE NOT LIVE BINDINGS */
/* THEY EXIST FOR USE BY DOCS-RS ONLY */

/* automatically generated by rust-bindgen 0.68.1 */

pub const PROJ_VERSION_MAJOR: u32 = 9;
pub const PROJ_VERSION_MINOR: u32 = 4;
pub const PROJ_VERSION_PATCH: u32 = 0;
pub const PJ_DEFAULT_CTX: u32 = 0;
pub const PROJ_ERR_INVALID_OP: u32 = 1024;
pub const PROJ_ERR_INVALID_OP_WRONG_SYNTAX: u32 = 1025;
pub const PROJ_ERR_INVALID_OP_MISSING_ARG: u32 = 1026;
pub const PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE: u32 = 1027;
pub const PROJ_ERR_INVALID_OP_MUTUALLY_EXCLUSIVE_ARGS: u32 = 1028;
pub const PROJ_ERR_INVALID_OP_FILE_NOT_FOUND_OR_INVALID: u32 = 1029;
pub const PROJ_ERR_COORD_TRANSFM: u32 = 2048;
pub const PROJ_ERR_COORD_TRANSFM_INVALID_COORD: u32 = 2049;
pub const PROJ_ERR_COORD_TRANSFM_OUTSIDE_PROJECTION_DOMAIN: u32 = 2050;
pub const PROJ_ERR_COORD_TRANSFM_NO_OPERATION: u32 = 2051;
pub const PROJ_ERR_COORD_TRANSFM_OUTSIDE_GRID: u32 = 2052;
pub const PROJ_ERR_COORD_TRANSFM_GRID_AT_NODATA: u32 = 2053;
pub const PROJ_ERR_COORD_TRANSFM_NO_CONVERGENCE: u32 = 2054;
pub const PROJ_ERR_COORD_TRANSFM_MISSING_TIME: u32 = 2055;
pub const PROJ_ERR_OTHER: u32 = 4096;
pub const PROJ_ERR_OTHER_API_MISUSE: u32 = 4097;
pub const PROJ_ERR_OTHER_NO_INVERSE_OP: u32 = 4098;
pub const PROJ_ERR_OTHER_NETWORK_ERROR: u32 = 4099;
pub type wchar_t = ::std::os::raw::c_int;
unsafe extern "C" {
    pub static pj_release: [::std::os::raw::c_char; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJ_AREA {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct P5_FACTORS {
    pub meridional_scale: f64,
    pub parallel_scale: f64,
    pub areal_scale: f64,
    pub angular_distortion: f64,
    pub meridian_parallel_angle: f64,
    pub meridian_convergence: f64,
    pub tissot_semimajor: f64,
    pub tissot_semiminor: f64,
    pub dx_dlam: f64,
    pub dx_dphi: f64,
    pub dy_dlam: f64,
    pub dy_dphi: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of P5_FACTORS"][::std::mem::size_of::<P5_FACTORS>() - 96usize];
    ["Alignment of P5_FACTORS"][::std::mem::align_of::<P5_FACTORS>() - 8usize];
    ["Offset of field: P5_FACTORS::meridional_scale"]
        [::std::mem::offset_of!(P5_FACTORS, meridional_scale) - 0usize];
    ["Offset of field: P5_FACTORS::parallel_scale"]
        [::std::mem::offset_of!(P5_FACTORS, parallel_scale) - 8usize];
    ["Offset of field: P5_FACTORS::areal_scale"]
        [::std::mem::offset_of!(P5_FACTORS, areal_scale) - 16usize];
    ["Offset of field: P5_FACTORS::angular_distortion"]
        [::std::mem::offset_of!(P5_FACTORS, angular_distortion) - 24usize];
    ["Offset of field: P5_FACTORS::meridian_parallel_angle"]
        [::std::mem::offset_of!(P5_FACTORS, meridian_parallel_angle) - 32usize];
    ["Offset of field: P5_FACTORS::meridian_convergence"]
        [::std::mem::offset_of!(P5_FACTORS, meridian_convergence) - 40usize];
    ["Offset of field: P5_FACTORS::tissot_semimajor"]
        [::std::mem::offset_of!(P5_FACTORS, tissot_semimajor) - 48usize];
    ["Offset of field: P5_FACTORS::tissot_semiminor"]
        [::std::mem::offset_of!(P5_FACTORS, tissot_semiminor) - 56usize];
    ["Offset of field: P5_FACTORS::dx_dlam"][::std::mem::offset_of!(P5_FACTORS, dx_dlam) - 64usize];
    ["Offset of field: P5_FACTORS::dx_dphi"][::std::mem::offset_of!(P5_FACTORS, dx_dphi) - 72usize];
    ["Offset of field: P5_FACTORS::dy_dlam"][::std::mem::offset_of!(P5_FACTORS, dy_dlam) - 80usize];
    ["Offset of field: P5_FACTORS::dy_dphi"][::std::mem::offset_of!(P5_FACTORS, dy_dphi) - 88usize];
};
pub type PJ_FACTORS = P5_FACTORS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJconsts {
    _unused: [u8; 0],
}
pub type PJ = PJconsts;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJ_LIST {
    pub id: *const ::std::os::raw::c_char,
    pub proj: ::std::option::Option<unsafe extern "C" fn(arg1: *mut PJ) -> *mut PJ>,
    pub descr: *const *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PJ_LIST"][::std::mem::size_of::<PJ_LIST>() - 24usize];
    ["Alignment of PJ_LIST"][::std::mem::align_of::<PJ_LIST>() - 8usize];
    ["Offset of field: PJ_LIST::id"][::std::mem::offset_of!(PJ_LIST, id) - 0usize];
    ["Offset of field: PJ_LIST::proj"][::std::mem::offset_of!(PJ_LIST, proj) - 8usize];
    ["Offset of field: PJ_LIST::descr"][::std::mem::offset_of!(PJ_LIST, descr) - 16usize];
};
pub type PJ_OPERATIONS = PJ_LIST;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJ_ELLPS {
    pub id: *const ::std::os::raw::c_char,
    pub major: *const ::std::os::raw::c_char,
    pub ell: *const ::std::os::raw::c_char,
    pub name: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PJ_ELLPS"][::std::mem::size_of::<PJ_ELLPS>() - 32usize];
    ["Alignment of PJ_ELLPS"][::std::mem::align_of::<PJ_ELLPS>() - 8usize];
    ["Offset of field: PJ_ELLPS::id"][::std::mem::offset_of!(PJ_ELLPS, id) - 0usize];
    ["Offset of field: PJ_ELLPS::major"][::std::mem::offset_of!(PJ_ELLPS, major) - 8usize];
    ["Offset of field: PJ_ELLPS::ell"][::std::mem::offset_of!(PJ_ELLPS, ell) - 16usize];
    ["Offset of field: PJ_ELLPS::name"][::std::mem::offset_of!(PJ_ELLPS, name) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJ_UNITS {
    pub id: *const ::std::os::raw::c_char,
    pub to_meter: *const ::std::os::raw::c_char,
    pub name: *const ::std::os::raw::c_char,
    pub factor: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PJ_UNITS"][::std::mem::size_of::<PJ_UNITS>() - 32usize];
    ["Alignment of PJ_UNITS"][::std::mem::align_of::<PJ_UNITS>() - 8usize];
    ["Offset of field: PJ_UNITS::id"][::std::mem::offset_of!(PJ_UNITS, id) - 0usize];
    ["Offset of field: PJ_UNITS::to_meter"][::std::mem::offset_of!(PJ_UNITS, to_meter) - 8usize];
    ["Offset of field: PJ_UNITS::name"][::std::mem::offset_of!(PJ_UNITS, name) - 16usize];
    ["Offset of field: PJ_UNITS::factor"][::std::mem::offset_of!(PJ_UNITS, factor) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJ_PRIME_MERIDIANS {
    pub id: *const ::std::os::raw::c_char,
    pub defn: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PJ_PRIME_MERIDIANS"][::std::mem::size_of::<PJ_PRIME_MERIDIANS>() - 16usize];
    ["Alignment of PJ_PRIME_MERIDIANS"][::std::mem::align_of::<PJ_PRIME_MERIDIANS>() - 8usize];
    ["Offset of field: PJ_PRIME_MERIDIANS::id"]
        [::std::mem::offset_of!(PJ_PRIME_MERIDIANS, id) - 0usize];
    ["Offset of field: PJ_PRIME_MERIDIANS::defn"]
        [::std::mem::offset_of!(PJ_PRIME_MERIDIANS, defn) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJ_XYZT {
    pub x: f64,
    pub y: f64,
    pub z: f64,
    pub t: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PJ_XYZT"][::std::mem::size_of::<PJ_XYZT>() - 32usize];
    ["Alignment of PJ_XYZT"][::std::mem::align_of::<PJ_XYZT>() - 8usize];
    ["Offset of field: PJ_XYZT::x"][::std::mem::offset_of!(PJ_XYZT, x) - 0usize];
    ["Offset of field: PJ_XYZT::y"][::std::mem::offset_of!(PJ_XYZT, y) - 8usize];
    ["Offset of field: PJ_XYZT::z"][::std::mem::offset_of!(PJ_XYZT, z) - 16usize];
    ["Offset of field: PJ_XYZT::t"][::std::mem::offset_of!(PJ_XYZT, t) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJ_UVWT {
    pub u: f64,
    pub v: f64,
    pub w: f64,
    pub t: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PJ_UVWT"][::std::mem::size_of::<PJ_UVWT>() - 32usize];
    ["Alignment of PJ_UVWT"][::std::mem::align_of::<PJ_UVWT>() - 8usize];
    ["Offset of field: PJ_UVWT::u"][::std::mem::offset_of!(PJ_UVWT, u) - 0usize];
    ["Offset of field: PJ_UVWT::v"][::std::mem::offset_of!(PJ_UVWT, v) - 8usize];
    ["Offset of field: PJ_UVWT::w"][::std::mem::offset_of!(PJ_UVWT, w) - 16usize];
    ["Offset of field: PJ_UVWT::t"][::std::mem::offset_of!(PJ_UVWT, t) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJ_LPZT {
    pub lam: f64,
    pub phi: f64,
    pub z: f64,
    pub t: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PJ_LPZT"][::std::mem::size_of::<PJ_LPZT>() - 32usize];
    ["Alignment of PJ_LPZT"][::std::mem::align_of::<PJ_LPZT>() - 8usize];
    ["Offset of field: PJ_LPZT::lam"][::std::mem::offset_of!(PJ_LPZT, lam) - 0usize];
    ["Offset of field: PJ_LPZT::phi"][::std::mem::offset_of!(PJ_LPZT, phi) - 8usize];
    ["Offset of field: PJ_LPZT::z"][::std::mem::offset_of!(PJ_LPZT, z) - 16usize];
    ["Offset of field: PJ_LPZT::t"][::std::mem::offset_of!(PJ_LPZT, t) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJ_OPK {
    pub o: f64,
    pub p: f64,
    pub k: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PJ_OPK"][::std::mem::size_of::<PJ_OPK>() - 24usize];
    ["Alignment of PJ_OPK"][::std::mem::align_of::<PJ_OPK>() - 8usize];
    ["Offset of field: PJ_OPK::o"][::std::mem::offset_of!(PJ_OPK, o) - 0usize];
    ["Offset of field: PJ_OPK::p"][::std::mem::offset_of!(PJ_OPK, p) - 8usize];
    ["Offset of field: PJ_OPK::k"][::std::mem::offset_of!(PJ_OPK, k) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJ_ENU {
    pub e: f64,
    pub n: f64,
    pub u: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PJ_ENU"][::std::mem::size_of::<PJ_ENU>() - 24usize];
    ["Alignment of PJ_ENU"][::std::mem::align_of::<PJ_ENU>() - 8usize];
    ["Offset of field: PJ_ENU::e"][::std::mem::offset_of!(PJ_ENU, e) - 0usize];
    ["Offset of field: PJ_ENU::n"][::std::mem::offset_of!(PJ_ENU, n) - 8usize];
    ["Offset of field: PJ_ENU::u"][::std::mem::offset_of!(PJ_ENU, u) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJ_GEOD {
    pub s: f64,
    pub a1: f64,
    pub a2: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PJ_GEOD"][::std::mem::size_of::<PJ_GEOD>() - 24usize];
    ["Alignment of PJ_GEOD"][::std::mem::align_of::<PJ_GEOD>() - 8usize];
    ["Offset of field: PJ_GEOD::s"][::std::mem::offset_of!(PJ_GEOD, s) - 0usize];
    ["Offset of field: PJ_GEOD::a1"][::std::mem::offset_of!(PJ_GEOD, a1) - 8usize];
    ["Offset of field: PJ_GEOD::a2"][::std::mem::offset_of!(PJ_GEOD, a2) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJ_UV {
    pub u: f64,
    pub v: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PJ_UV"][::std::mem::size_of::<PJ_UV>() - 16usize];
    ["Alignment of PJ_UV"][::std::mem::align_of::<PJ_UV>() - 8usize];
    ["Offset of field: PJ_UV::u"][::std::mem::offset_of!(PJ_UV, u) - 0usize];
    ["Offset of field: PJ_UV::v"][::std::mem::offset_of!(PJ_UV, v) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJ_XY {
    pub x: f64,
    pub y: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PJ_XY"][::std::mem::size_of::<PJ_XY>() - 16usize];
    ["Alignment of PJ_XY"][::std::mem::align_of::<PJ_XY>() - 8usize];
    ["Offset of field: PJ_XY::x"][::std::mem::offset_of!(PJ_XY, x) - 0usize];
    ["Offset of field: PJ_XY::y"][::std::mem::offset_of!(PJ_XY, y) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJ_LP {
    pub lam: f64,
    pub phi: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PJ_LP"][::std::mem::size_of::<PJ_LP>() - 16usize];
    ["Alignment of PJ_LP"][::std::mem::align_of::<PJ_LP>() - 8usize];
    ["Offset of field: PJ_LP::lam"][::std::mem::offset_of!(PJ_LP, lam) - 0usize];
    ["Offset of field: PJ_LP::phi"][::std::mem::offset_of!(PJ_LP, phi) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJ_XYZ {
    pub x: f64,
    pub y: f64,
    pub z: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PJ_XYZ"][::std::mem::size_of::<PJ_XYZ>() - 24usize];
    ["Alignment of PJ_XYZ"][::std::mem::align_of::<PJ_XYZ>() - 8usize];
    ["Offset of field: PJ_XYZ::x"][::std::mem::offset_of!(PJ_XYZ, x) - 0usize];
    ["Offset of field: PJ_XYZ::y"][::std::mem::offset_of!(PJ_XYZ, y) - 8usize];
    ["Offset of field: PJ_XYZ::z"][::std::mem::offset_of!(PJ_XYZ, z) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJ_UVW {
    pub u: f64,
    pub v: f64,
    pub w: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PJ_UVW"][::std::mem::size_of::<PJ_UVW>() - 24usize];
    ["Alignment of PJ_UVW"][::std::mem::align_of::<PJ_UVW>() - 8usize];
    ["Offset of field: PJ_UVW::u"][::std::mem::offset_of!(PJ_UVW, u) - 0usize];
    ["Offset of field: PJ_UVW::v"][::std::mem::offset_of!(PJ_UVW, v) - 8usize];
    ["Offset of field: PJ_UVW::w"][::std::mem::offset_of!(PJ_UVW, w) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJ_LPZ {
    pub lam: f64,
    pub phi: f64,
    pub z: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PJ_LPZ"][::std::mem::size_of::<PJ_LPZ>() - 24usize];
    ["Alignment of PJ_LPZ"][::std::mem::align_of::<PJ_LPZ>() - 8usize];
    ["Offset of field: PJ_LPZ::lam"][::std::mem::offset_of!(PJ_LPZ, lam) - 0usize];
    ["Offset of field: PJ_LPZ::phi"][::std::mem::offset_of!(PJ_LPZ, phi) - 8usize];
    ["Offset of field: PJ_LPZ::z"][::std::mem::offset_of!(PJ_LPZ, z) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union PJ_COORD {
    pub v: [f64; 4usize],
    pub xyzt: PJ_XYZT,
    pub uvwt: PJ_UVWT,
    pub lpzt: PJ_LPZT,
    pub geod: PJ_GEOD,
    pub opk: PJ_OPK,
    pub enu: PJ_ENU,
    pub xyz: PJ_XYZ,
    pub uvw: PJ_UVW,
    pub lpz: PJ_LPZ,
    pub xy: PJ_XY,
    pub uv: PJ_UV,
    pub lp: PJ_LP,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PJ_COORD"][::std::mem::size_of::<PJ_COORD>() - 32usize];
    ["Alignment of PJ_COORD"][::std::mem::align_of::<PJ_COORD>() - 8usize];
    ["Offset of field: PJ_COORD::v"][::std::mem::offset_of!(PJ_COORD, v) - 0usize];
    ["Offset of field: PJ_COORD::xyzt"][::std::mem::offset_of!(PJ_COORD, xyzt) - 0usize];
    ["Offset of field: PJ_COORD::uvwt"][::std::mem::offset_of!(PJ_COORD, uvwt) - 0usize];
    ["Offset of field: PJ_COORD::lpzt"][::std::mem::offset_of!(PJ_COORD, lpzt) - 0usize];
    ["Offset of field: PJ_COORD::geod"][::std::mem::offset_of!(PJ_COORD, geod) - 0usize];
    ["Offset of field: PJ_COORD::opk"][::std::mem::offset_of!(PJ_COORD, opk) - 0usize];
    ["Offset of field: PJ_COORD::enu"][::std::mem::offset_of!(PJ_COORD, enu) - 0usize];
    ["Offset of field: PJ_COORD::xyz"][::std::mem::offset_of!(PJ_COORD, xyz) - 0usize];
    ["Offset of field: PJ_COORD::uvw"][::std::mem::offset_of!(PJ_COORD, uvw) - 0usize];
    ["Offset of field: PJ_COORD::lpz"][::std::mem::offset_of!(PJ_COORD, lpz) - 0usize];
    ["Offset of field: PJ_COORD::xy"][::std::mem::offset_of!(PJ_COORD, xy) - 0usize];
    ["Offset of field: PJ_COORD::uv"][::std::mem::offset_of!(PJ_COORD, uv) - 0usize];
    ["Offset of field: PJ_COORD::lp"][::std::mem::offset_of!(PJ_COORD, lp) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJ_INFO {
    pub major: ::std::os::raw::c_int,
    pub minor: ::std::os::raw::c_int,
    pub patch: ::std::os::raw::c_int,
    pub release: *const ::std::os::raw::c_char,
    pub version: *const ::std::os::raw::c_char,
    pub searchpath: *const ::std::os::raw::c_char,
    pub paths: *const *const ::std::os::raw::c_char,
    pub path_count: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PJ_INFO"][::std::mem::size_of::<PJ_INFO>() - 56usize];
    ["Alignment of PJ_INFO"][::std::mem::align_of::<PJ_INFO>() - 8usize];
    ["Offset of field: PJ_INFO::major"][::std::mem::offset_of!(PJ_INFO, major) - 0usize];
    ["Offset of field: PJ_INFO::minor"][::std::mem::offset_of!(PJ_INFO, minor) - 4usize];
    ["Offset of field: PJ_INFO::patch"][::std::mem::offset_of!(PJ_INFO, patch) - 8usize];
    ["Offset of field: PJ_INFO::release"][::std::mem::offset_of!(PJ_INFO, release) - 16usize];
    ["Offset of field: PJ_INFO::version"][::std::mem::offset_of!(PJ_INFO, version) - 24usize];
    ["Offset of field: PJ_INFO::searchpath"][::std::mem::offset_of!(PJ_INFO, searchpath) - 32usize];
    ["Offset of field: PJ_INFO::paths"][::std::mem::offset_of!(PJ_INFO, paths) - 40usize];
    ["Offset of field: PJ_INFO::path_count"][::std::mem::offset_of!(PJ_INFO, path_count) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJ_PROJ_INFO {
    pub id: *const ::std::os::raw::c_char,
    pub description: *const ::std::os::raw::c_char,
    pub definition: *const ::std::os::raw::c_char,
    pub has_inverse: ::std::os::raw::c_int,
    pub accuracy: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PJ_PROJ_INFO"][::std::mem::size_of::<PJ_PROJ_INFO>() - 40usize];
    ["Alignment of PJ_PROJ_INFO"][::std::mem::align_of::<PJ_PROJ_INFO>() - 8usize];
    ["Offset of field: PJ_PROJ_INFO::id"][::std::mem::offset_of!(PJ_PROJ_INFO, id) - 0usize];
    ["Offset of field: PJ_PROJ_INFO::description"]
        [::std::mem::offset_of!(PJ_PROJ_INFO, description) - 8usize];
    ["Offset of field: PJ_PROJ_INFO::definition"]
        [::std::mem::offset_of!(PJ_PROJ_INFO, definition) - 16usize];
    ["Offset of field: PJ_PROJ_INFO::has_inverse"]
        [::std::mem::offset_of!(PJ_PROJ_INFO, has_inverse) - 24usize];
    ["Offset of field: PJ_PROJ_INFO::accuracy"]
        [::std::mem::offset_of!(PJ_PROJ_INFO, accuracy) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJ_GRID_INFO {
    pub gridname: [::std::os::raw::c_char; 32usize],
    pub filename: [::std::os::raw::c_char; 260usize],
    pub format: [::std::os::raw::c_char; 8usize],
    pub lowerleft: PJ_LP,
    pub upperright: PJ_LP,
    pub n_lon: ::std::os::raw::c_int,
    pub n_lat: ::std::os::raw::c_int,
    pub cs_lon: f64,
    pub cs_lat: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PJ_GRID_INFO"][::std::mem::size_of::<PJ_GRID_INFO>() - 360usize];
    ["Alignment of PJ_GRID_INFO"][::std::mem::align_of::<PJ_GRID_INFO>() - 8usize];
    ["Offset of field: PJ_GRID_INFO::gridname"]
        [::std::mem::offset_of!(PJ_GRID_INFO, gridname) - 0usize];
    ["Offset of field: PJ_GRID_INFO::filename"]
        [::std::mem::offset_of!(PJ_GRID_INFO, filename) - 32usize];
    ["Offset of field: PJ_GRID_INFO::format"]
        [::std::mem::offset_of!(PJ_GRID_INFO, format) - 292usize];
    ["Offset of field: PJ_GRID_INFO::lowerleft"]
        [::std::mem::offset_of!(PJ_GRID_INFO, lowerleft) - 304usize];
    ["Offset of field: PJ_GRID_INFO::upperright"]
        [::std::mem::offset_of!(PJ_GRID_INFO, upperright) - 320usize];
    ["Offset of field: PJ_GRID_INFO::n_lon"]
        [::std::mem::offset_of!(PJ_GRID_INFO, n_lon) - 336usize];
    ["Offset of field: PJ_GRID_INFO::n_lat"]
        [::std::mem::offset_of!(PJ_GRID_INFO, n_lat) - 340usize];
    ["Offset of field: PJ_GRID_INFO::cs_lon"]
        [::std::mem::offset_of!(PJ_GRID_INFO, cs_lon) - 344usize];
    ["Offset of field: PJ_GRID_INFO::cs_lat"]
        [::std::mem::offset_of!(PJ_GRID_INFO, cs_lat) - 352usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJ_INIT_INFO {
    pub name: [::std::os::raw::c_char; 32usize],
    pub filename: [::std::os::raw::c_char; 260usize],
    pub version: [::std::os::raw::c_char; 32usize],
    pub origin: [::std::os::raw::c_char; 32usize],
    pub lastupdate: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PJ_INIT_INFO"][::std::mem::size_of::<PJ_INIT_INFO>() - 372usize];
    ["Alignment of PJ_INIT_INFO"][::std::mem::align_of::<PJ_INIT_INFO>() - 1usize];
    ["Offset of field: PJ_INIT_INFO::name"][::std::mem::offset_of!(PJ_INIT_INFO, name) - 0usize];
    ["Offset of field: PJ_INIT_INFO::filename"]
        [::std::mem::offset_of!(PJ_INIT_INFO, filename) - 32usize];
    ["Offset of field: PJ_INIT_INFO::version"]
        [::std::mem::offset_of!(PJ_INIT_INFO, version) - 292usize];
    ["Offset of field: PJ_INIT_INFO::origin"]
        [::std::mem::offset_of!(PJ_INIT_INFO, origin) - 324usize];
    ["Offset of field: PJ_INIT_INFO::lastupdate"]
        [::std::mem::offset_of!(PJ_INIT_INFO, lastupdate) - 356usize];
};
pub const PJ_LOG_LEVEL_PJ_LOG_NONE: PJ_LOG_LEVEL = 0;
pub const PJ_LOG_LEVEL_PJ_LOG_ERROR: PJ_LOG_LEVEL = 1;
pub const PJ_LOG_LEVEL_PJ_LOG_DEBUG: PJ_LOG_LEVEL = 2;
pub const PJ_LOG_LEVEL_PJ_LOG_TRACE: PJ_LOG_LEVEL = 3;
pub const PJ_LOG_LEVEL_PJ_LOG_TELL: PJ_LOG_LEVEL = 4;
pub const PJ_LOG_LEVEL_PJ_LOG_DEBUG_MAJOR: PJ_LOG_LEVEL = 2;
pub const PJ_LOG_LEVEL_PJ_LOG_DEBUG_MINOR: PJ_LOG_LEVEL = 3;
pub type PJ_LOG_LEVEL = ::std::os::raw::c_uint;
pub type PJ_LOG_FUNCTION = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ctx {
    _unused: [u8; 0],
}
pub type PJ_CONTEXT = pj_ctx;
unsafe extern "C" {
    pub fn proj_context_create() -> *mut PJ_CONTEXT;
}
unsafe extern "C" {
    pub fn proj_context_destroy(ctx: *mut PJ_CONTEXT) -> *mut PJ_CONTEXT;
}
unsafe extern "C" {
    pub fn proj_context_clone(ctx: *mut PJ_CONTEXT) -> *mut PJ_CONTEXT;
}
#[doc = " Callback to resolve a filename to a full path"]
pub type proj_file_finder = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut PJ_CONTEXT,
        arg1: *const ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char,
>;
unsafe extern "C" {
    #[doc = " @endcond"]
    pub fn proj_context_set_file_finder(
        ctx: *mut PJ_CONTEXT,
        finder: proj_file_finder,
        user_data: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn proj_context_set_search_paths(
        ctx: *mut PJ_CONTEXT,
        count_paths: ::std::os::raw::c_int,
        paths: *const *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn proj_context_set_ca_bundle_path(
        ctx: *mut PJ_CONTEXT,
        path: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[doc = " @cond Doxygen_Suppress"]
    pub fn proj_context_use_proj4_init_rules(ctx: *mut PJ_CONTEXT, enable: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn proj_context_get_use_proj4_init_rules(
        ctx: *mut PJ_CONTEXT,
        from_legacy_code_path: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PROJ_FILE_HANDLE {
    _unused: [u8; 0],
}
#[doc = " Read-only access. Equivalent to \"rb\""]
pub const PROJ_OPEN_ACCESS_PROJ_OPEN_ACCESS_READ_ONLY: PROJ_OPEN_ACCESS = 0;
#[doc = " Read-update access. File should be created if not existing. Equivalent\nto \"r+b\""]
pub const PROJ_OPEN_ACCESS_PROJ_OPEN_ACCESS_READ_UPDATE: PROJ_OPEN_ACCESS = 1;
#[doc = " Create access. File should be truncated to 0-byte if already existing.\nEquivalent to \"w+b\""]
pub const PROJ_OPEN_ACCESS_PROJ_OPEN_ACCESS_CREATE: PROJ_OPEN_ACCESS = 2;
#[doc = " Open access / mode"]
pub type PROJ_OPEN_ACCESS = ::std::os::raw::c_uint;
#[doc = " File API callbacks"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PROJ_FILE_API {
    #[doc = " Version of this structure. Should be set to 1 currently."]
    pub version: ::std::os::raw::c_int,
    #[doc = " Open file. Return NULL if error"]
    pub open_cbk: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut PJ_CONTEXT,
            filename: *const ::std::os::raw::c_char,
            access: PROJ_OPEN_ACCESS,
            user_data: *mut ::std::os::raw::c_void,
        ) -> *mut PROJ_FILE_HANDLE,
    >,
    #[doc = " Read sizeBytes into buffer from current position and return number of\n bytes read"]
    pub read_cbk: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut PJ_CONTEXT,
            arg1: *mut PROJ_FILE_HANDLE,
            buffer: *mut ::std::os::raw::c_void,
            sizeBytes: usize,
            user_data: *mut ::std::os::raw::c_void,
        ) -> usize,
    >,
    #[doc = " Write sizeBytes into buffer from current position and return number of\n bytes written"]
    pub write_cbk: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut PJ_CONTEXT,
            arg1: *mut PROJ_FILE_HANDLE,
            buffer: *const ::std::os::raw::c_void,
            sizeBytes: usize,
            user_data: *mut ::std::os::raw::c_void,
        ) -> usize,
    >,
    #[doc = " Seek to offset using whence=SEEK_SET/SEEK_CUR/SEEK_END. Return TRUE in\n case of success"]
    pub seek_cbk: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut PJ_CONTEXT,
            arg1: *mut PROJ_FILE_HANDLE,
            offset: ::std::os::raw::c_longlong,
            whence: ::std::os::raw::c_int,
            user_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Return current file position"]
    pub tell_cbk: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut PJ_CONTEXT,
            arg1: *mut PROJ_FILE_HANDLE,
            user_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_ulonglong,
    >,
    #[doc = " Close file"]
    pub close_cbk: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut PJ_CONTEXT,
            arg1: *mut PROJ_FILE_HANDLE,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    #[doc = " Return TRUE if a file exists"]
    pub exists_cbk: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut PJ_CONTEXT,
            filename: *const ::std::os::raw::c_char,
            user_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Return TRUE if directory exists or could be created"]
    pub mkdir_cbk: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut PJ_CONTEXT,
            filename: *const ::std::os::raw::c_char,
            user_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Return TRUE if file could be removed"]
    pub unlink_cbk: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut PJ_CONTEXT,
            filename: *const ::std::os::raw::c_char,
            user_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Return TRUE if file could be renamed"]
    pub rename_cbk: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut PJ_CONTEXT,
            oldPath: *const ::std::os::raw::c_char,
            newPath: *const ::std::os::raw::c_char,
            user_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PROJ_FILE_API"][::std::mem::size_of::<PROJ_FILE_API>() - 88usize];
    ["Alignment of PROJ_FILE_API"][::std::mem::align_of::<PROJ_FILE_API>() - 8usize];
    ["Offset of field: PROJ_FILE_API::version"]
        [::std::mem::offset_of!(PROJ_FILE_API, version) - 0usize];
    ["Offset of field: PROJ_FILE_API::open_cbk"]
        [::std::mem::offset_of!(PROJ_FILE_API, open_cbk) - 8usize];
    ["Offset of field: PROJ_FILE_API::read_cbk"]
        [::std::mem::offset_of!(PROJ_FILE_API, read_cbk) - 16usize];
    ["Offset of field: PROJ_FILE_API::write_cbk"]
        [::std::mem::offset_of!(PROJ_FILE_API, write_cbk) - 24usize];
    ["Offset of field: PROJ_FILE_API::seek_cbk"]
        [::std::mem::offset_of!(PROJ_FILE_API, seek_cbk) - 32usize];
    ["Offset of field: PROJ_FILE_API::tell_cbk"]
        [::std::mem::offset_of!(PROJ_FILE_API, tell_cbk) - 40usize];
    ["Offset of field: PROJ_FILE_API::close_cbk"]
        [::std::mem::offset_of!(PROJ_FILE_API, close_cbk) - 48usize];
    ["Offset of field: PROJ_FILE_API::exists_cbk"]
        [::std::mem::offset_of!(PROJ_FILE_API, exists_cbk) - 56usize];
    ["Offset of field: PROJ_FILE_API::mkdir_cbk"]
        [::std::mem::offset_of!(PROJ_FILE_API, mkdir_cbk) - 64usize];
    ["Offset of field: PROJ_FILE_API::unlink_cbk"]
        [::std::mem::offset_of!(PROJ_FILE_API, unlink_cbk) - 72usize];
    ["Offset of field: PROJ_FILE_API::rename_cbk"]
        [::std::mem::offset_of!(PROJ_FILE_API, rename_cbk) - 80usize];
};
unsafe extern "C" {
    pub fn proj_context_set_fileapi(
        ctx: *mut PJ_CONTEXT,
        fileapi: *const PROJ_FILE_API,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_context_set_sqlite3_vfs_name(
        ctx: *mut PJ_CONTEXT,
        name: *const ::std::os::raw::c_char,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PROJ_NETWORK_HANDLE {
    _unused: [u8; 0],
}
#[doc = " Network access: open callback\n\n Should try to read the size_to_read first bytes at the specified offset of\n the file given by URL url,\n and write them to buffer. *out_size_read should be updated with the actual\n amount of bytes read (== size_to_read if the file is larger than\n size_to_read). During this read, the implementation should make sure to store\n the HTTP headers from the server response to be able to respond to\n proj_network_get_header_value_cbk_type callback.\n\n error_string_max_size should be the maximum size that can be written into\n the out_error_string buffer (including terminating nul character).\n\n @return a non-NULL opaque handle in case of success."]
pub type proj_network_open_cbk_type = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut PJ_CONTEXT,
        url: *const ::std::os::raw::c_char,
        offset: ::std::os::raw::c_ulonglong,
        size_to_read: usize,
        buffer: *mut ::std::os::raw::c_void,
        out_size_read: *mut usize,
        error_string_max_size: usize,
        out_error_string: *mut ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut PROJ_NETWORK_HANDLE,
>;
#[doc = " Network access: close callback"]
pub type proj_network_close_cbk_type = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut PJ_CONTEXT,
        handle: *mut PROJ_NETWORK_HANDLE,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
#[doc = " Network access: get HTTP headers"]
pub type proj_network_get_header_value_cbk_type = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut PJ_CONTEXT,
        handle: *mut PROJ_NETWORK_HANDLE,
        header_name: *const ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char,
>;
#[doc = " Network access: read range\n\n Read size_to_read bytes from handle, starting at offset, into\n buffer.\n During this read, the implementation should make sure to store the HTTP\n headers from the server response to be able to respond to\n proj_network_get_header_value_cbk_type callback.\n\n error_string_max_size should be the maximum size that can be written into\n the out_error_string buffer (including terminating nul character).\n\n @return the number of bytes actually read (0 in case of error)"]
pub type proj_network_read_range_type = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut PJ_CONTEXT,
        handle: *mut PROJ_NETWORK_HANDLE,
        offset: ::std::os::raw::c_ulonglong,
        size_to_read: usize,
        buffer: *mut ::std::os::raw::c_void,
        error_string_max_size: usize,
        out_error_string: *mut ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
    ) -> usize,
>;
unsafe extern "C" {
    pub fn proj_context_set_network_callbacks(
        ctx: *mut PJ_CONTEXT,
        open_cbk: proj_network_open_cbk_type,
        close_cbk: proj_network_close_cbk_type,
        get_header_value_cbk: proj_network_get_header_value_cbk_type,
        read_range_cbk: proj_network_read_range_type,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_context_set_enable_network(
        ctx: *mut PJ_CONTEXT,
        enabled: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_context_is_network_enabled(ctx: *mut PJ_CONTEXT) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_context_set_url_endpoint(ctx: *mut PJ_CONTEXT, url: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn proj_context_get_url_endpoint(ctx: *mut PJ_CONTEXT) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn proj_context_get_user_writable_directory(
        ctx: *mut PJ_CONTEXT,
        create: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn proj_context_set_user_writable_directory(
        ctx: *mut PJ_CONTEXT,
        path: *const ::std::os::raw::c_char,
        create: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn proj_grid_cache_set_enable(ctx: *mut PJ_CONTEXT, enabled: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn proj_grid_cache_set_filename(
        ctx: *mut PJ_CONTEXT,
        fullname: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn proj_grid_cache_set_max_size(ctx: *mut PJ_CONTEXT, max_size_MB: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn proj_grid_cache_set_ttl(ctx: *mut PJ_CONTEXT, ttl_seconds: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn proj_grid_cache_clear(ctx: *mut PJ_CONTEXT);
}
unsafe extern "C" {
    pub fn proj_is_download_needed(
        ctx: *mut PJ_CONTEXT,
        url_or_filename: *const ::std::os::raw::c_char,
        ignore_ttl_setting: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_download_file(
        ctx: *mut PJ_CONTEXT,
        url_or_filename: *const ::std::os::raw::c_char,
        ignore_ttl_setting: ::std::os::raw::c_int,
        progress_cbk: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut PJ_CONTEXT,
                pct: f64,
                user_data: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " @cond Doxygen_Suppress"]
    pub fn proj_create(ctx: *mut PJ_CONTEXT, definition: *const ::std::os::raw::c_char) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_argv(
        ctx: *mut PJ_CONTEXT,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_crs_to_crs(
        ctx: *mut PJ_CONTEXT,
        source_crs: *const ::std::os::raw::c_char,
        target_crs: *const ::std::os::raw::c_char,
        area: *mut PJ_AREA,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_crs_to_crs_from_pj(
        ctx: *mut PJ_CONTEXT,
        source_crs: *const PJ,
        target_crs: *const PJ,
        area: *mut PJ_AREA,
        options: *const *const ::std::os::raw::c_char,
    ) -> *mut PJ;
}
unsafe extern "C" {
    #[doc = " @endcond"]
    pub fn proj_normalize_for_visualization(ctx: *mut PJ_CONTEXT, obj: *const PJ) -> *mut PJ;
}
unsafe extern "C" {
    #[doc = " @cond Doxygen_Suppress"]
    pub fn proj_assign_context(pj: *mut PJ, ctx: *mut PJ_CONTEXT);
}
unsafe extern "C" {
    pub fn proj_destroy(P: *mut PJ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_area_create() -> *mut PJ_AREA;
}
unsafe extern "C" {
    pub fn proj_area_set_bbox(
        area: *mut PJ_AREA,
        west_lon_degree: f64,
        south_lat_degree: f64,
        east_lon_degree: f64,
        north_lat_degree: f64,
    );
}
unsafe extern "C" {
    pub fn proj_area_set_name(area: *mut PJ_AREA, name: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn proj_area_destroy(area: *mut PJ_AREA);
}
pub const PJ_DIRECTION_PJ_FWD: PJ_DIRECTION = 1;
pub const PJ_DIRECTION_PJ_IDENT: PJ_DIRECTION = 0;
pub const PJ_DIRECTION_PJ_INV: PJ_DIRECTION = -1;
pub type PJ_DIRECTION = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn proj_angular_input(P: *mut PJ, dir: PJ_DIRECTION) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_angular_output(P: *mut PJ, dir: PJ_DIRECTION) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_degree_input(P: *mut PJ, dir: PJ_DIRECTION) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_degree_output(P: *mut PJ, dir: PJ_DIRECTION) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_trans(P: *mut PJ, direction: PJ_DIRECTION, coord: PJ_COORD) -> PJ_COORD;
}
unsafe extern "C" {
    pub fn proj_trans_get_last_used_operation(P: *mut PJ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_trans_array(
        P: *mut PJ,
        direction: PJ_DIRECTION,
        n: usize,
        coord: *mut PJ_COORD,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_trans_generic(
        P: *mut PJ,
        direction: PJ_DIRECTION,
        x: *mut f64,
        sx: usize,
        nx: usize,
        y: *mut f64,
        sy: usize,
        ny: usize,
        z: *mut f64,
        sz: usize,
        nz: usize,
        t: *mut f64,
        st: usize,
        nt: usize,
    ) -> usize;
}
unsafe extern "C" {
    #[doc = " @endcond"]
    pub fn proj_trans_bounds(
        context: *mut PJ_CONTEXT,
        P: *mut PJ,
        direction: PJ_DIRECTION,
        xmin: f64,
        ymin: f64,
        xmax: f64,
        ymax: f64,
        out_xmin: *mut f64,
        out_ymin: *mut f64,
        out_xmax: *mut f64,
        out_ymax: *mut f64,
        densify_pts: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " @cond Doxygen_Suppress"]
    pub fn proj_coord(x: f64, y: f64, z: f64, t: f64) -> PJ_COORD;
}
unsafe extern "C" {
    pub fn proj_roundtrip(
        P: *mut PJ,
        direction: PJ_DIRECTION,
        n: ::std::os::raw::c_int,
        coord: *mut PJ_COORD,
    ) -> f64;
}
unsafe extern "C" {
    pub fn proj_lp_dist(P: *const PJ, a: PJ_COORD, b: PJ_COORD) -> f64;
}
unsafe extern "C" {
    pub fn proj_lpz_dist(P: *const PJ, a: PJ_COORD, b: PJ_COORD) -> f64;
}
unsafe extern "C" {
    pub fn proj_xy_dist(a: PJ_COORD, b: PJ_COORD) -> f64;
}
unsafe extern "C" {
    pub fn proj_xyz_dist(a: PJ_COORD, b: PJ_COORD) -> f64;
}
unsafe extern "C" {
    pub fn proj_geod(P: *const PJ, a: PJ_COORD, b: PJ_COORD) -> PJ_COORD;
}
unsafe extern "C" {
    pub fn proj_context_errno(ctx: *mut PJ_CONTEXT) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_errno(P: *const PJ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_errno_set(P: *const PJ, err: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_errno_reset(P: *const PJ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_errno_restore(P: *const PJ, err: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_errno_string(err: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn proj_context_errno_string(
        ctx: *mut PJ_CONTEXT,
        err: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn proj_log_level(ctx: *mut PJ_CONTEXT, log_level: PJ_LOG_LEVEL) -> PJ_LOG_LEVEL;
}
unsafe extern "C" {
    pub fn proj_log_func(
        ctx: *mut PJ_CONTEXT,
        app_data: *mut ::std::os::raw::c_void,
        logf: PJ_LOG_FUNCTION,
    );
}
unsafe extern "C" {
    pub fn proj_factors(P: *mut PJ, lp: PJ_COORD) -> PJ_FACTORS;
}
unsafe extern "C" {
    pub fn proj_info() -> PJ_INFO;
}
unsafe extern "C" {
    pub fn proj_pj_info(P: *mut PJ) -> PJ_PROJ_INFO;
}
unsafe extern "C" {
    pub fn proj_grid_info(gridname: *const ::std::os::raw::c_char) -> PJ_GRID_INFO;
}
unsafe extern "C" {
    pub fn proj_init_info(initname: *const ::std::os::raw::c_char) -> PJ_INIT_INFO;
}
unsafe extern "C" {
    pub fn proj_list_operations() -> *const PJ_OPERATIONS;
}
unsafe extern "C" {
    pub fn proj_list_ellps() -> *const PJ_ELLPS;
}
unsafe extern "C" {
    pub fn proj_list_units() -> *const PJ_UNITS;
}
unsafe extern "C" {
    pub fn proj_list_angular_units() -> *const PJ_UNITS;
}
unsafe extern "C" {
    pub fn proj_list_prime_meridians() -> *const PJ_PRIME_MERIDIANS;
}
unsafe extern "C" {
    pub fn proj_torad(angle_in_degrees: f64) -> f64;
}
unsafe extern "C" {
    pub fn proj_todeg(angle_in_radians: f64) -> f64;
}
unsafe extern "C" {
    pub fn proj_dmstor(
        is: *const ::std::os::raw::c_char,
        rs: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
unsafe extern "C" {
    pub fn proj_rtodms(
        s: *mut ::std::os::raw::c_char,
        r: f64,
        pos: ::std::os::raw::c_int,
        neg: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn proj_rtodms2(
        s: *mut ::std::os::raw::c_char,
        sizeof_s: usize,
        r: f64,
        pos: ::std::os::raw::c_int,
        neg: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn proj_cleanup();
}
#[doc = " \\brief Type representing a NULL terminated list of NULL-terminate strings."]
pub type PROJ_STRING_LIST = *mut *mut ::std::os::raw::c_char;
#[doc = " \\ref WKT2_2019"]
pub const PJ_GUESSED_WKT_DIALECT_PJ_GUESSED_WKT2_2019: PJ_GUESSED_WKT_DIALECT = 0;
#[doc = " Deprecated alias for PJ_GUESSED_WKT2_2019"]
pub const PJ_GUESSED_WKT_DIALECT_PJ_GUESSED_WKT2_2018: PJ_GUESSED_WKT_DIALECT = 0;
#[doc = " \\ref WKT2_2015"]
pub const PJ_GUESSED_WKT_DIALECT_PJ_GUESSED_WKT2_2015: PJ_GUESSED_WKT_DIALECT = 1;
#[doc = " \\ref WKT1"]
pub const PJ_GUESSED_WKT_DIALECT_PJ_GUESSED_WKT1_GDAL: PJ_GUESSED_WKT_DIALECT = 2;
#[doc = " ESRI variant of WKT1"]
pub const PJ_GUESSED_WKT_DIALECT_PJ_GUESSED_WKT1_ESRI: PJ_GUESSED_WKT_DIALECT = 3;
#[doc = " Not WKT / unrecognized"]
pub const PJ_GUESSED_WKT_DIALECT_PJ_GUESSED_NOT_WKT: PJ_GUESSED_WKT_DIALECT = 4;
#[doc = " \\brief Guessed WKT \"dialect\"."]
pub type PJ_GUESSED_WKT_DIALECT = ::std::os::raw::c_uint;
pub const PJ_CATEGORY_PJ_CATEGORY_ELLIPSOID: PJ_CATEGORY = 0;
pub const PJ_CATEGORY_PJ_CATEGORY_PRIME_MERIDIAN: PJ_CATEGORY = 1;
pub const PJ_CATEGORY_PJ_CATEGORY_DATUM: PJ_CATEGORY = 2;
pub const PJ_CATEGORY_PJ_CATEGORY_CRS: PJ_CATEGORY = 3;
pub const PJ_CATEGORY_PJ_CATEGORY_COORDINATE_OPERATION: PJ_CATEGORY = 4;
pub const PJ_CATEGORY_PJ_CATEGORY_DATUM_ENSEMBLE: PJ_CATEGORY = 5;
#[doc = " \\brief Object category."]
pub type PJ_CATEGORY = ::std::os::raw::c_uint;
pub const PJ_TYPE_PJ_TYPE_UNKNOWN: PJ_TYPE = 0;
pub const PJ_TYPE_PJ_TYPE_ELLIPSOID: PJ_TYPE = 1;
pub const PJ_TYPE_PJ_TYPE_PRIME_MERIDIAN: PJ_TYPE = 2;
pub const PJ_TYPE_PJ_TYPE_GEODETIC_REFERENCE_FRAME: PJ_TYPE = 3;
pub const PJ_TYPE_PJ_TYPE_DYNAMIC_GEODETIC_REFERENCE_FRAME: PJ_TYPE = 4;
pub const PJ_TYPE_PJ_TYPE_VERTICAL_REFERENCE_FRAME: PJ_TYPE = 5;
pub const PJ_TYPE_PJ_TYPE_DYNAMIC_VERTICAL_REFERENCE_FRAME: PJ_TYPE = 6;
pub const PJ_TYPE_PJ_TYPE_DATUM_ENSEMBLE: PJ_TYPE = 7;
#[doc = " Abstract type, not returned by proj_get_type()"]
pub const PJ_TYPE_PJ_TYPE_CRS: PJ_TYPE = 8;
#[doc = " Abstract type, not returned by proj_get_type()"]
pub const PJ_TYPE_PJ_TYPE_GEODETIC_CRS: PJ_TYPE = 9;
#[doc = " Abstract type, not returned by proj_get_type()"]
pub const PJ_TYPE_PJ_TYPE_GEOCENTRIC_CRS: PJ_TYPE = 10;
#[doc = " proj_get_type() will never return that type, but\n PJ_TYPE_GEOGRAPHIC_2D_CRS or PJ_TYPE_GEOGRAPHIC_3D_CRS."]
pub const PJ_TYPE_PJ_TYPE_GEOGRAPHIC_CRS: PJ_TYPE = 11;
#[doc = " proj_get_type() will never return that type, but\n PJ_TYPE_GEOGRAPHIC_2D_CRS or PJ_TYPE_GEOGRAPHIC_3D_CRS."]
pub const PJ_TYPE_PJ_TYPE_GEOGRAPHIC_2D_CRS: PJ_TYPE = 12;
#[doc = " proj_get_type() will never return that type, but\n PJ_TYPE_GEOGRAPHIC_2D_CRS or PJ_TYPE_GEOGRAPHIC_3D_CRS."]
pub const PJ_TYPE_PJ_TYPE_GEOGRAPHIC_3D_CRS: PJ_TYPE = 13;
#[doc = " proj_get_type() will never return that type, but\n PJ_TYPE_GEOGRAPHIC_2D_CRS or PJ_TYPE_GEOGRAPHIC_3D_CRS."]
pub const PJ_TYPE_PJ_TYPE_VERTICAL_CRS: PJ_TYPE = 14;
#[doc = " proj_get_type() will never return that type, but\n PJ_TYPE_GEOGRAPHIC_2D_CRS or PJ_TYPE_GEOGRAPHIC_3D_CRS."]
pub const PJ_TYPE_PJ_TYPE_PROJECTED_CRS: PJ_TYPE = 15;
#[doc = " proj_get_type() will never return that type, but\n PJ_TYPE_GEOGRAPHIC_2D_CRS or PJ_TYPE_GEOGRAPHIC_3D_CRS."]
pub const PJ_TYPE_PJ_TYPE_COMPOUND_CRS: PJ_TYPE = 16;
#[doc = " proj_get_type() will never return that type, but\n PJ_TYPE_GEOGRAPHIC_2D_CRS or PJ_TYPE_GEOGRAPHIC_3D_CRS."]
pub const PJ_TYPE_PJ_TYPE_TEMPORAL_CRS: PJ_TYPE = 17;
#[doc = " proj_get_type() will never return that type, but\n PJ_TYPE_GEOGRAPHIC_2D_CRS or PJ_TYPE_GEOGRAPHIC_3D_CRS."]
pub const PJ_TYPE_PJ_TYPE_ENGINEERING_CRS: PJ_TYPE = 18;
#[doc = " proj_get_type() will never return that type, but\n PJ_TYPE_GEOGRAPHIC_2D_CRS or PJ_TYPE_GEOGRAPHIC_3D_CRS."]
pub const PJ_TYPE_PJ_TYPE_BOUND_CRS: PJ_TYPE = 19;
#[doc = " proj_get_type() will never return that type, but\n PJ_TYPE_GEOGRAPHIC_2D_CRS or PJ_TYPE_GEOGRAPHIC_3D_CRS."]
pub const PJ_TYPE_PJ_TYPE_OTHER_CRS: PJ_TYPE = 20;
#[doc = " proj_get_type() will never return that type, but\n PJ_TYPE_GEOGRAPHIC_2D_CRS or PJ_TYPE_GEOGRAPHIC_3D_CRS."]
pub const PJ_TYPE_PJ_TYPE_CONVERSION: PJ_TYPE = 21;
#[doc = " proj_get_type() will never return that type, but\n PJ_TYPE_GEOGRAPHIC_2D_CRS or PJ_TYPE_GEOGRAPHIC_3D_CRS."]
pub const PJ_TYPE_PJ_TYPE_TRANSFORMATION: PJ_TYPE = 22;
#[doc = " proj_get_type() will never return that type, but\n PJ_TYPE_GEOGRAPHIC_2D_CRS or PJ_TYPE_GEOGRAPHIC_3D_CRS."]
pub const PJ_TYPE_PJ_TYPE_CONCATENATED_OPERATION: PJ_TYPE = 23;
#[doc = " proj_get_type() will never return that type, but\n PJ_TYPE_GEOGRAPHIC_2D_CRS or PJ_TYPE_GEOGRAPHIC_3D_CRS."]
pub const PJ_TYPE_PJ_TYPE_OTHER_COORDINATE_OPERATION: PJ_TYPE = 24;
#[doc = " proj_get_type() will never return that type, but\n PJ_TYPE_GEOGRAPHIC_2D_CRS or PJ_TYPE_GEOGRAPHIC_3D_CRS."]
pub const PJ_TYPE_PJ_TYPE_TEMPORAL_DATUM: PJ_TYPE = 25;
#[doc = " proj_get_type() will never return that type, but\n PJ_TYPE_GEOGRAPHIC_2D_CRS or PJ_TYPE_GEOGRAPHIC_3D_CRS."]
pub const PJ_TYPE_PJ_TYPE_ENGINEERING_DATUM: PJ_TYPE = 26;
#[doc = " proj_get_type() will never return that type, but\n PJ_TYPE_GEOGRAPHIC_2D_CRS or PJ_TYPE_GEOGRAPHIC_3D_CRS."]
pub const PJ_TYPE_PJ_TYPE_PARAMETRIC_DATUM: PJ_TYPE = 27;
#[doc = " proj_get_type() will never return that type, but\n PJ_TYPE_GEOGRAPHIC_2D_CRS or PJ_TYPE_GEOGRAPHIC_3D_CRS."]
pub const PJ_TYPE_PJ_TYPE_DERIVED_PROJECTED_CRS: PJ_TYPE = 28;
#[doc = " proj_get_type() will never return that type, but\n PJ_TYPE_GEOGRAPHIC_2D_CRS or PJ_TYPE_GEOGRAPHIC_3D_CRS."]
pub const PJ_TYPE_PJ_TYPE_COORDINATE_METADATA: PJ_TYPE = 29;
#[doc = " \\brief Object type."]
pub type PJ_TYPE = ::std::os::raw::c_uint;
#[doc = " All properties are identical."]
pub const PJ_COMPARISON_CRITERION_PJ_COMP_STRICT: PJ_COMPARISON_CRITERION = 0;
#[doc = " The objects are equivalent for the purpose of coordinate\n operations. They can differ by the name of their objects,\n identifiers, other metadata.\n Parameters may be expressed in different units, provided that the\n value is (with some tolerance) the same once expressed in a\n common unit."]
pub const PJ_COMPARISON_CRITERION_PJ_COMP_EQUIVALENT: PJ_COMPARISON_CRITERION = 1;
#[doc = " Same as EQUIVALENT, relaxed with an exception that the axis order\n of the base CRS of a DerivedCRS/ProjectedCRS or the axis order of\n a GeographicCRS is ignored. Only to be used\n with DerivedCRS/ProjectedCRS/GeographicCRS"]
pub const PJ_COMPARISON_CRITERION_PJ_COMP_EQUIVALENT_EXCEPT_AXIS_ORDER_GEOGCRS:
    PJ_COMPARISON_CRITERION = 2;
#[doc = " Comparison criterion."]
pub type PJ_COMPARISON_CRITERION = ::std::os::raw::c_uint;
#[doc = " cf osgeo::proj::io::WKTFormatter::Convention::WKT2"]
pub const PJ_WKT_TYPE_PJ_WKT2_2015: PJ_WKT_TYPE = 0;
#[doc = " cf osgeo::proj::io::WKTFormatter::Convention::WKT2_SIMPLIFIED"]
pub const PJ_WKT_TYPE_PJ_WKT2_2015_SIMPLIFIED: PJ_WKT_TYPE = 1;
#[doc = " cf osgeo::proj::io::WKTFormatter::Convention::WKT2_2019"]
pub const PJ_WKT_TYPE_PJ_WKT2_2019: PJ_WKT_TYPE = 2;
#[doc = " Deprecated alias for PJ_WKT2_2019"]
pub const PJ_WKT_TYPE_PJ_WKT2_2018: PJ_WKT_TYPE = 2;
#[doc = " cf osgeo::proj::io::WKTFormatter::Convention::WKT2_2019_SIMPLIFIED"]
pub const PJ_WKT_TYPE_PJ_WKT2_2019_SIMPLIFIED: PJ_WKT_TYPE = 3;
#[doc = " Deprecated alias for PJ_WKT2_2019"]
pub const PJ_WKT_TYPE_PJ_WKT2_2018_SIMPLIFIED: PJ_WKT_TYPE = 3;
#[doc = " cf osgeo::proj::io::WKTFormatter::Convention::WKT1_GDAL"]
pub const PJ_WKT_TYPE_PJ_WKT1_GDAL: PJ_WKT_TYPE = 4;
#[doc = " cf osgeo::proj::io::WKTFormatter::Convention::WKT1_ESRI"]
pub const PJ_WKT_TYPE_PJ_WKT1_ESRI: PJ_WKT_TYPE = 5;
#[doc = " \\brief WKT version."]
pub type PJ_WKT_TYPE = ::std::os::raw::c_uint;
#[doc = " Ignore CRS extent"]
pub const PROJ_CRS_EXTENT_USE_PJ_CRS_EXTENT_NONE: PROJ_CRS_EXTENT_USE = 0;
#[doc = " Test coordinate operation extent against both CRS extent."]
pub const PROJ_CRS_EXTENT_USE_PJ_CRS_EXTENT_BOTH: PROJ_CRS_EXTENT_USE = 1;
#[doc = " Test coordinate operation extent against the intersection of both\nCRS extent."]
pub const PROJ_CRS_EXTENT_USE_PJ_CRS_EXTENT_INTERSECTION: PROJ_CRS_EXTENT_USE = 2;
#[doc = " Test coordinate operation against the smallest of both CRS extent."]
pub const PROJ_CRS_EXTENT_USE_PJ_CRS_EXTENT_SMALLEST: PROJ_CRS_EXTENT_USE = 3;
#[doc = " Specify how source and target CRS extent should be used to restrict\n candidate operations (only taken into account if no explicit area of\n interest is specified."]
pub type PROJ_CRS_EXTENT_USE = ::std::os::raw::c_uint;
#[doc = " Grid availability is only used for sorting results. Operations\n where some grids are missing will be sorted last."]
pub const PROJ_GRID_AVAILABILITY_USE_PROJ_GRID_AVAILABILITY_USED_FOR_SORTING:
    PROJ_GRID_AVAILABILITY_USE = 0;
#[doc = " Completely discard an operation if a required grid is missing."]
pub const PROJ_GRID_AVAILABILITY_USE_PROJ_GRID_AVAILABILITY_DISCARD_OPERATION_IF_MISSING_GRID:
    PROJ_GRID_AVAILABILITY_USE = 1;
#[doc = " Ignore grid availability at all. Results will be presented as if\n all grids were available."]
pub const PROJ_GRID_AVAILABILITY_USE_PROJ_GRID_AVAILABILITY_IGNORED: PROJ_GRID_AVAILABILITY_USE = 2;
#[doc = " Results will be presented as if grids known to PROJ (that is\n registered in the grid_alternatives table of its database) were\n available. Used typically when networking is enabled."]
pub const PROJ_GRID_AVAILABILITY_USE_PROJ_GRID_AVAILABILITY_KNOWN_AVAILABLE:
    PROJ_GRID_AVAILABILITY_USE = 3;
#[doc = " Describe how grid availability is used."]
pub type PROJ_GRID_AVAILABILITY_USE = ::std::os::raw::c_uint;
#[doc = " cf osgeo::proj::io::PROJStringFormatter::Convention::PROJ_5"]
pub const PJ_PROJ_STRING_TYPE_PJ_PROJ_5: PJ_PROJ_STRING_TYPE = 0;
#[doc = " cf osgeo::proj::io::PROJStringFormatter::Convention::PROJ_4"]
pub const PJ_PROJ_STRING_TYPE_PJ_PROJ_4: PJ_PROJ_STRING_TYPE = 1;
#[doc = " \\brief PROJ string version."]
pub type PJ_PROJ_STRING_TYPE = ::std::os::raw::c_uint;
#[doc = " The area of validity of transforms should strictly contain the\n are of interest."]
pub const PROJ_SPATIAL_CRITERION_PROJ_SPATIAL_CRITERION_STRICT_CONTAINMENT: PROJ_SPATIAL_CRITERION =
    0;
#[doc = " The area of validity of transforms should at least intersect the\n area of interest."]
pub const PROJ_SPATIAL_CRITERION_PROJ_SPATIAL_CRITERION_PARTIAL_INTERSECTION:
    PROJ_SPATIAL_CRITERION = 1;
#[doc = " Spatial criterion to restrict candidate operations."]
pub type PROJ_SPATIAL_CRITERION = ::std::os::raw::c_uint;
#[doc = " Always search for intermediate CRS."]
pub const PROJ_INTERMEDIATE_CRS_USE_PROJ_INTERMEDIATE_CRS_USE_ALWAYS: PROJ_INTERMEDIATE_CRS_USE = 0;
#[doc = " Only attempt looking for intermediate CRS if there is no direct\n transformation available."]
pub const PROJ_INTERMEDIATE_CRS_USE_PROJ_INTERMEDIATE_CRS_USE_IF_NO_DIRECT_TRANSFORMATION:
    PROJ_INTERMEDIATE_CRS_USE = 1;
#[doc = " Only attempt looking for intermediate CRS if there is no direct\n transformation available."]
pub const PROJ_INTERMEDIATE_CRS_USE_PROJ_INTERMEDIATE_CRS_USE_NEVER: PROJ_INTERMEDIATE_CRS_USE = 2;
#[doc = " Describe if and how intermediate CRS should be used"]
pub type PROJ_INTERMEDIATE_CRS_USE = ::std::os::raw::c_uint;
pub const PJ_COORDINATE_SYSTEM_TYPE_PJ_CS_TYPE_UNKNOWN: PJ_COORDINATE_SYSTEM_TYPE = 0;
pub const PJ_COORDINATE_SYSTEM_TYPE_PJ_CS_TYPE_CARTESIAN: PJ_COORDINATE_SYSTEM_TYPE = 1;
pub const PJ_COORDINATE_SYSTEM_TYPE_PJ_CS_TYPE_ELLIPSOIDAL: PJ_COORDINATE_SYSTEM_TYPE = 2;
pub const PJ_COORDINATE_SYSTEM_TYPE_PJ_CS_TYPE_VERTICAL: PJ_COORDINATE_SYSTEM_TYPE = 3;
pub const PJ_COORDINATE_SYSTEM_TYPE_PJ_CS_TYPE_SPHERICAL: PJ_COORDINATE_SYSTEM_TYPE = 4;
pub const PJ_COORDINATE_SYSTEM_TYPE_PJ_CS_TYPE_ORDINAL: PJ_COORDINATE_SYSTEM_TYPE = 5;
pub const PJ_COORDINATE_SYSTEM_TYPE_PJ_CS_TYPE_PARAMETRIC: PJ_COORDINATE_SYSTEM_TYPE = 6;
pub const PJ_COORDINATE_SYSTEM_TYPE_PJ_CS_TYPE_DATETIMETEMPORAL: PJ_COORDINATE_SYSTEM_TYPE = 7;
pub const PJ_COORDINATE_SYSTEM_TYPE_PJ_CS_TYPE_TEMPORALCOUNT: PJ_COORDINATE_SYSTEM_TYPE = 8;
pub const PJ_COORDINATE_SYSTEM_TYPE_PJ_CS_TYPE_TEMPORALMEASURE: PJ_COORDINATE_SYSTEM_TYPE = 9;
#[doc = " Type of coordinate system."]
pub type PJ_COORDINATE_SYSTEM_TYPE = ::std::os::raw::c_uint;
#[doc = " \\brief Structure given overall description of a CRS.\n\n This structure may grow over time, and should not be directly allocated by\n client code."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PROJ_CRS_INFO {
    #[doc = " Authority name."]
    pub auth_name: *mut ::std::os::raw::c_char,
    #[doc = " Object code."]
    pub code: *mut ::std::os::raw::c_char,
    #[doc = " Object name."]
    pub name: *mut ::std::os::raw::c_char,
    #[doc = " Object type."]
    pub type_: PJ_TYPE,
    #[doc = " Whether the object is deprecated"]
    pub deprecated: ::std::os::raw::c_int,
    #[doc = " Whereas the west_lon_degree, south_lat_degree, east_lon_degree and\n north_lat_degree fields are valid."]
    pub bbox_valid: ::std::os::raw::c_int,
    #[doc = " Western-most longitude of the area of use, in degrees."]
    pub west_lon_degree: f64,
    #[doc = " Southern-most latitude of the area of use, in degrees."]
    pub south_lat_degree: f64,
    #[doc = " Eastern-most longitude of the area of use, in degrees."]
    pub east_lon_degree: f64,
    #[doc = " Northern-most latitude of the area of use, in degrees."]
    pub north_lat_degree: f64,
    #[doc = " Name of the area of use."]
    pub area_name: *mut ::std::os::raw::c_char,
    #[doc = " Name of the projection method for a projected CRS. Might be NULL even\nfor projected CRS in some cases."]
    pub projection_method_name: *mut ::std::os::raw::c_char,
    #[doc = " Name of the celestial body of the CRS (e.g. \"Earth\").\n @since 8.1"]
    pub celestial_body_name: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PROJ_CRS_INFO"][::std::mem::size_of::<PROJ_CRS_INFO>() - 96usize];
    ["Alignment of PROJ_CRS_INFO"][::std::mem::align_of::<PROJ_CRS_INFO>() - 8usize];
    ["Offset of field: PROJ_CRS_INFO::auth_name"]
        [::std::mem::offset_of!(PROJ_CRS_INFO, auth_name) - 0usize];
    ["Offset of field: PROJ_CRS_INFO::code"][::std::mem::offset_of!(PROJ_CRS_INFO, code) - 8usize];
    ["Offset of field: PROJ_CRS_INFO::name"][::std::mem::offset_of!(PROJ_CRS_INFO, name) - 16usize];
    ["Offset of field: PROJ_CRS_INFO::type_"]
        [::std::mem::offset_of!(PROJ_CRS_INFO, type_) - 24usize];
    ["Offset of field: PROJ_CRS_INFO::deprecated"]
        [::std::mem::offset_of!(PROJ_CRS_INFO, deprecated) - 28usize];
    ["Offset of field: PROJ_CRS_INFO::bbox_valid"]
        [::std::mem::offset_of!(PROJ_CRS_INFO, bbox_valid) - 32usize];
    ["Offset of field: PROJ_CRS_INFO::west_lon_degree"]
        [::std::mem::offset_of!(PROJ_CRS_INFO, west_lon_degree) - 40usize];
    ["Offset of field: PROJ_CRS_INFO::south_lat_degree"]
        [::std::mem::offset_of!(PROJ_CRS_INFO, south_lat_degree) - 48usize];
    ["Offset of field: PROJ_CRS_INFO::east_lon_degree"]
        [::std::mem::offset_of!(PROJ_CRS_INFO, east_lon_degree) - 56usize];
    ["Offset of field: PROJ_CRS_INFO::north_lat_degree"]
        [::std::mem::offset_of!(PROJ_CRS_INFO, north_lat_degree) - 64usize];
    ["Offset of field: PROJ_CRS_INFO::area_name"]
        [::std::mem::offset_of!(PROJ_CRS_INFO, area_name) - 72usize];
    ["Offset of field: PROJ_CRS_INFO::projection_method_name"]
        [::std::mem::offset_of!(PROJ_CRS_INFO, projection_method_name) - 80usize];
    ["Offset of field: PROJ_CRS_INFO::celestial_body_name"]
        [::std::mem::offset_of!(PROJ_CRS_INFO, celestial_body_name) - 88usize];
};
#[doc = " \\brief Structure describing optional parameters for proj_get_crs_list();\n\n This structure may grow over time, and should not be directly allocated by\n client code."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PROJ_CRS_LIST_PARAMETERS {
    #[doc = " Array of allowed object types. Should be NULL if all types are allowed"]
    pub types: *const PJ_TYPE,
    #[doc = " Size of types. Should be 0 if all types are allowed"]
    pub typesCount: usize,
    #[doc = " If TRUE and bbox_valid == TRUE, then only CRS whose area of use\n entirely contains the specified bounding box will be returned.\n If FALSE and bbox_valid == TRUE, then only CRS whose area of use\n intersects the specified bounding box will be returned."]
    pub crs_area_of_use_contains_bbox: ::std::os::raw::c_int,
    #[doc = " To set to TRUE so that west_lon_degree, south_lat_degree,\n east_lon_degree and north_lat_degree fields are taken into account."]
    pub bbox_valid: ::std::os::raw::c_int,
    #[doc = " Western-most longitude of the area of use, in degrees."]
    pub west_lon_degree: f64,
    #[doc = " Southern-most latitude of the area of use, in degrees."]
    pub south_lat_degree: f64,
    #[doc = " Eastern-most longitude of the area of use, in degrees."]
    pub east_lon_degree: f64,
    #[doc = " Northern-most latitude of the area of use, in degrees."]
    pub north_lat_degree: f64,
    #[doc = " Whether deprecated objects are allowed. Default to FALSE."]
    pub allow_deprecated: ::std::os::raw::c_int,
    #[doc = " Celestial body of the CRS (e.g. \"Earth\"). The default value, NULL,\n  means no restriction\n @since 8.1"]
    pub celestial_body_name: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PROJ_CRS_LIST_PARAMETERS"]
        [::std::mem::size_of::<PROJ_CRS_LIST_PARAMETERS>() - 72usize];
    ["Alignment of PROJ_CRS_LIST_PARAMETERS"]
        [::std::mem::align_of::<PROJ_CRS_LIST_PARAMETERS>() - 8usize];
    ["Offset of field: PROJ_CRS_LIST_PARAMETERS::types"]
        [::std::mem::offset_of!(PROJ_CRS_LIST_PARAMETERS, types) - 0usize];
    ["Offset of field: PROJ_CRS_LIST_PARAMETERS::typesCount"]
        [::std::mem::offset_of!(PROJ_CRS_LIST_PARAMETERS, typesCount) - 8usize];
    ["Offset of field: PROJ_CRS_LIST_PARAMETERS::crs_area_of_use_contains_bbox"]
        [::std::mem::offset_of!(PROJ_CRS_LIST_PARAMETERS, crs_area_of_use_contains_bbox) - 16usize];
    ["Offset of field: PROJ_CRS_LIST_PARAMETERS::bbox_valid"]
        [::std::mem::offset_of!(PROJ_CRS_LIST_PARAMETERS, bbox_valid) - 20usize];
    ["Offset of field: PROJ_CRS_LIST_PARAMETERS::west_lon_degree"]
        [::std::mem::offset_of!(PROJ_CRS_LIST_PARAMETERS, west_lon_degree) - 24usize];
    ["Offset of field: PROJ_CRS_LIST_PARAMETERS::south_lat_degree"]
        [::std::mem::offset_of!(PROJ_CRS_LIST_PARAMETERS, south_lat_degree) - 32usize];
    ["Offset of field: PROJ_CRS_LIST_PARAMETERS::east_lon_degree"]
        [::std::mem::offset_of!(PROJ_CRS_LIST_PARAMETERS, east_lon_degree) - 40usize];
    ["Offset of field: PROJ_CRS_LIST_PARAMETERS::north_lat_degree"]
        [::std::mem::offset_of!(PROJ_CRS_LIST_PARAMETERS, north_lat_degree) - 48usize];
    ["Offset of field: PROJ_CRS_LIST_PARAMETERS::allow_deprecated"]
        [::std::mem::offset_of!(PROJ_CRS_LIST_PARAMETERS, allow_deprecated) - 56usize];
    ["Offset of field: PROJ_CRS_LIST_PARAMETERS::celestial_body_name"]
        [::std::mem::offset_of!(PROJ_CRS_LIST_PARAMETERS, celestial_body_name) - 64usize];
};
#[doc = " \\brief Structure given description of a unit.\n\n This structure may grow over time, and should not be directly allocated by\n client code.\n @since 7.1"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PROJ_UNIT_INFO {
    #[doc = " Authority name."]
    pub auth_name: *mut ::std::os::raw::c_char,
    #[doc = " Object code."]
    pub code: *mut ::std::os::raw::c_char,
    #[doc = " Object name. For example \"metre\", \"US survey foot\", etc."]
    pub name: *mut ::std::os::raw::c_char,
    #[doc = " Category of the unit: one of \"linear\", \"linear_per_time\", \"angular\",\n \"angular_per_time\", \"scale\", \"scale_per_time\" or \"time\""]
    pub category: *mut ::std::os::raw::c_char,
    #[doc = " Conversion factor to apply to transform from that unit to the\n corresponding SI unit (metre for \"linear\", radian for \"angular\", etc.).\n It might be 0 in some cases to indicate no known conversion factor."]
    pub conv_factor: f64,
    #[doc = " PROJ short name, like \"m\", \"ft\", \"us-ft\", etc... Might be NULL"]
    pub proj_short_name: *mut ::std::os::raw::c_char,
    #[doc = " Whether the object is deprecated"]
    pub deprecated: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PROJ_UNIT_INFO"][::std::mem::size_of::<PROJ_UNIT_INFO>() - 56usize];
    ["Alignment of PROJ_UNIT_INFO"][::std::mem::align_of::<PROJ_UNIT_INFO>() - 8usize];
    ["Offset of field: PROJ_UNIT_INFO::auth_name"]
        [::std::mem::offset_of!(PROJ_UNIT_INFO, auth_name) - 0usize];
    ["Offset of field: PROJ_UNIT_INFO::code"]
        [::std::mem::offset_of!(PROJ_UNIT_INFO, code) - 8usize];
    ["Offset of field: PROJ_UNIT_INFO::name"]
        [::std::mem::offset_of!(PROJ_UNIT_INFO, name) - 16usize];
    ["Offset of field: PROJ_UNIT_INFO::category"]
        [::std::mem::offset_of!(PROJ_UNIT_INFO, category) - 24usize];
    ["Offset of field: PROJ_UNIT_INFO::conv_factor"]
        [::std::mem::offset_of!(PROJ_UNIT_INFO, conv_factor) - 32usize];
    ["Offset of field: PROJ_UNIT_INFO::proj_short_name"]
        [::std::mem::offset_of!(PROJ_UNIT_INFO, proj_short_name) - 40usize];
    ["Offset of field: PROJ_UNIT_INFO::deprecated"]
        [::std::mem::offset_of!(PROJ_UNIT_INFO, deprecated) - 48usize];
};
#[doc = " \\brief Structure given description of a celestial body.\n\n This structure may grow over time, and should not be directly allocated by\n client code.\n @since 8.1"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PROJ_CELESTIAL_BODY_INFO {
    #[doc = " Authority name."]
    pub auth_name: *mut ::std::os::raw::c_char,
    #[doc = " Object name. For example \"Earth\""]
    pub name: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PROJ_CELESTIAL_BODY_INFO"]
        [::std::mem::size_of::<PROJ_CELESTIAL_BODY_INFO>() - 16usize];
    ["Alignment of PROJ_CELESTIAL_BODY_INFO"]
        [::std::mem::align_of::<PROJ_CELESTIAL_BODY_INFO>() - 8usize];
    ["Offset of field: PROJ_CELESTIAL_BODY_INFO::auth_name"]
        [::std::mem::offset_of!(PROJ_CELESTIAL_BODY_INFO, auth_name) - 0usize];
    ["Offset of field: PROJ_CELESTIAL_BODY_INFO::name"]
        [::std::mem::offset_of!(PROJ_CELESTIAL_BODY_INFO, name) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJ_OBJ_LIST {
    _unused: [u8; 0],
}
unsafe extern "C" {
    #[doc = " @endcond"]
    pub fn proj_string_list_destroy(list: PROJ_STRING_LIST);
}
unsafe extern "C" {
    pub fn proj_context_set_autoclose_database(
        ctx: *mut PJ_CONTEXT,
        autoclose: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn proj_context_set_database_path(
        ctx: *mut PJ_CONTEXT,
        dbPath: *const ::std::os::raw::c_char,
        auxDbPaths: *const *const ::std::os::raw::c_char,
        options: *const *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_context_get_database_path(ctx: *mut PJ_CONTEXT) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn proj_context_get_database_metadata(
        ctx: *mut PJ_CONTEXT,
        key: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn proj_context_get_database_structure(
        ctx: *mut PJ_CONTEXT,
        options: *const *const ::std::os::raw::c_char,
    ) -> PROJ_STRING_LIST;
}
unsafe extern "C" {
    pub fn proj_context_guess_wkt_dialect(
        ctx: *mut PJ_CONTEXT,
        wkt: *const ::std::os::raw::c_char,
    ) -> PJ_GUESSED_WKT_DIALECT;
}
unsafe extern "C" {
    pub fn proj_create_from_wkt(
        ctx: *mut PJ_CONTEXT,
        wkt: *const ::std::os::raw::c_char,
        options: *const *const ::std::os::raw::c_char,
        out_warnings: *mut PROJ_STRING_LIST,
        out_grammar_errors: *mut PROJ_STRING_LIST,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_from_database(
        ctx: *mut PJ_CONTEXT,
        auth_name: *const ::std::os::raw::c_char,
        code: *const ::std::os::raw::c_char,
        category: PJ_CATEGORY,
        usePROJAlternativeGridNames: ::std::os::raw::c_int,
        options: *const *const ::std::os::raw::c_char,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_uom_get_info_from_database(
        ctx: *mut PJ_CONTEXT,
        auth_name: *const ::std::os::raw::c_char,
        code: *const ::std::os::raw::c_char,
        out_name: *mut *const ::std::os::raw::c_char,
        out_conv_factor: *mut f64,
        out_category: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_grid_get_info_from_database(
        ctx: *mut PJ_CONTEXT,
        grid_name: *const ::std::os::raw::c_char,
        out_full_name: *mut *const ::std::os::raw::c_char,
        out_package_name: *mut *const ::std::os::raw::c_char,
        out_url: *mut *const ::std::os::raw::c_char,
        out_direct_download: *mut ::std::os::raw::c_int,
        out_open_license: *mut ::std::os::raw::c_int,
        out_available: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_clone(ctx: *mut PJ_CONTEXT, obj: *const PJ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_from_name(
        ctx: *mut PJ_CONTEXT,
        auth_name: *const ::std::os::raw::c_char,
        searchedName: *const ::std::os::raw::c_char,
        types: *const PJ_TYPE,
        typesCount: usize,
        approximateMatch: ::std::os::raw::c_int,
        limitResultCount: usize,
        options: *const *const ::std::os::raw::c_char,
    ) -> *mut PJ_OBJ_LIST;
}
unsafe extern "C" {
    pub fn proj_get_type(obj: *const PJ) -> PJ_TYPE;
}
unsafe extern "C" {
    pub fn proj_is_deprecated(obj: *const PJ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_get_non_deprecated(ctx: *mut PJ_CONTEXT, obj: *const PJ) -> *mut PJ_OBJ_LIST;
}
unsafe extern "C" {
    pub fn proj_is_equivalent_to(
        obj: *const PJ,
        other: *const PJ,
        criterion: PJ_COMPARISON_CRITERION,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_is_equivalent_to_with_ctx(
        ctx: *mut PJ_CONTEXT,
        obj: *const PJ,
        other: *const PJ,
        criterion: PJ_COMPARISON_CRITERION,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_is_crs(obj: *const PJ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_get_name(obj: *const PJ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn proj_get_id_auth_name(
        obj: *const PJ,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn proj_get_id_code(
        obj: *const PJ,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn proj_get_remarks(obj: *const PJ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn proj_get_domain_count(obj: *const PJ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_get_scope(obj: *const PJ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn proj_get_scope_ex(
        obj: *const PJ,
        domainIdx: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn proj_get_area_of_use(
        ctx: *mut PJ_CONTEXT,
        obj: *const PJ,
        out_west_lon_degree: *mut f64,
        out_south_lat_degree: *mut f64,
        out_east_lon_degree: *mut f64,
        out_north_lat_degree: *mut f64,
        out_area_name: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_get_area_of_use_ex(
        ctx: *mut PJ_CONTEXT,
        obj: *const PJ,
        domainIdx: ::std::os::raw::c_int,
        out_west_lon_degree: *mut f64,
        out_south_lat_degree: *mut f64,
        out_east_lon_degree: *mut f64,
        out_north_lat_degree: *mut f64,
        out_area_name: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_as_wkt(
        ctx: *mut PJ_CONTEXT,
        obj: *const PJ,
        type_: PJ_WKT_TYPE,
        options: *const *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn proj_as_proj_string(
        ctx: *mut PJ_CONTEXT,
        obj: *const PJ,
        type_: PJ_PROJ_STRING_TYPE,
        options: *const *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn proj_as_projjson(
        ctx: *mut PJ_CONTEXT,
        obj: *const PJ,
        options: *const *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn proj_get_source_crs(ctx: *mut PJ_CONTEXT, obj: *const PJ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_get_target_crs(ctx: *mut PJ_CONTEXT, obj: *const PJ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_identify(
        ctx: *mut PJ_CONTEXT,
        obj: *const PJ,
        auth_name: *const ::std::os::raw::c_char,
        options: *const *const ::std::os::raw::c_char,
        out_confidence: *mut *mut ::std::os::raw::c_int,
    ) -> *mut PJ_OBJ_LIST;
}
unsafe extern "C" {
    pub fn proj_get_geoid_models_from_database(
        ctx: *mut PJ_CONTEXT,
        auth_name: *const ::std::os::raw::c_char,
        code: *const ::std::os::raw::c_char,
        options: *const *const ::std::os::raw::c_char,
    ) -> PROJ_STRING_LIST;
}
unsafe extern "C" {
    pub fn proj_int_list_destroy(list: *mut ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn proj_get_authorities_from_database(ctx: *mut PJ_CONTEXT) -> PROJ_STRING_LIST;
}
unsafe extern "C" {
    pub fn proj_get_codes_from_database(
        ctx: *mut PJ_CONTEXT,
        auth_name: *const ::std::os::raw::c_char,
        type_: PJ_TYPE,
        allow_deprecated: ::std::os::raw::c_int,
    ) -> PROJ_STRING_LIST;
}
unsafe extern "C" {
    pub fn proj_get_celestial_body_list_from_database(
        ctx: *mut PJ_CONTEXT,
        auth_name: *const ::std::os::raw::c_char,
        out_result_count: *mut ::std::os::raw::c_int,
    ) -> *mut *mut PROJ_CELESTIAL_BODY_INFO;
}
unsafe extern "C" {
    pub fn proj_celestial_body_list_destroy(list: *mut *mut PROJ_CELESTIAL_BODY_INFO);
}
unsafe extern "C" {
    pub fn proj_get_crs_list_parameters_create() -> *mut PROJ_CRS_LIST_PARAMETERS;
}
unsafe extern "C" {
    pub fn proj_get_crs_list_parameters_destroy(params: *mut PROJ_CRS_LIST_PARAMETERS);
}
unsafe extern "C" {
    pub fn proj_get_crs_info_list_from_database(
        ctx: *mut PJ_CONTEXT,
        auth_name: *const ::std::os::raw::c_char,
        params: *const PROJ_CRS_LIST_PARAMETERS,
        out_result_count: *mut ::std::os::raw::c_int,
    ) -> *mut *mut PROJ_CRS_INFO;
}
unsafe extern "C" {
    pub fn proj_crs_info_list_destroy(list: *mut *mut PROJ_CRS_INFO);
}
unsafe extern "C" {
    pub fn proj_get_units_from_database(
        ctx: *mut PJ_CONTEXT,
        auth_name: *const ::std::os::raw::c_char,
        category: *const ::std::os::raw::c_char,
        allow_deprecated: ::std::os::raw::c_int,
        out_result_count: *mut ::std::os::raw::c_int,
    ) -> *mut *mut PROJ_UNIT_INFO;
}
unsafe extern "C" {
    pub fn proj_unit_list_destroy(list: *mut *mut PROJ_UNIT_INFO);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJ_INSERT_SESSION {
    _unused: [u8; 0],
}
unsafe extern "C" {
    #[doc = " @endcond"]
    pub fn proj_insert_object_session_create(ctx: *mut PJ_CONTEXT) -> *mut PJ_INSERT_SESSION;
}
unsafe extern "C" {
    pub fn proj_insert_object_session_destroy(
        ctx: *mut PJ_CONTEXT,
        session: *mut PJ_INSERT_SESSION,
    );
}
unsafe extern "C" {
    pub fn proj_get_insert_statements(
        ctx: *mut PJ_CONTEXT,
        session: *mut PJ_INSERT_SESSION,
        object: *const PJ,
        authority: *const ::std::os::raw::c_char,
        code: *const ::std::os::raw::c_char,
        numeric_codes: ::std::os::raw::c_int,
        allowed_authorities: *const *const ::std::os::raw::c_char,
        options: *const *const ::std::os::raw::c_char,
    ) -> PROJ_STRING_LIST;
}
unsafe extern "C" {
    pub fn proj_suggests_code_for(
        ctx: *mut PJ_CONTEXT,
        object: *const PJ,
        authority: *const ::std::os::raw::c_char,
        numeric_code: ::std::os::raw::c_int,
        options: *const *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn proj_string_destroy(str_: *mut ::std::os::raw::c_char);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJ_OPERATION_FACTORY_CONTEXT {
    _unused: [u8; 0],
}
unsafe extern "C" {
    #[doc = " @endcond"]
    pub fn proj_create_operation_factory_context(
        ctx: *mut PJ_CONTEXT,
        authority: *const ::std::os::raw::c_char,
    ) -> *mut PJ_OPERATION_FACTORY_CONTEXT;
}
unsafe extern "C" {
    pub fn proj_operation_factory_context_destroy(ctx: *mut PJ_OPERATION_FACTORY_CONTEXT);
}
unsafe extern "C" {
    pub fn proj_operation_factory_context_set_desired_accuracy(
        ctx: *mut PJ_CONTEXT,
        factory_ctx: *mut PJ_OPERATION_FACTORY_CONTEXT,
        accuracy: f64,
    );
}
unsafe extern "C" {
    pub fn proj_operation_factory_context_set_area_of_interest(
        ctx: *mut PJ_CONTEXT,
        factory_ctx: *mut PJ_OPERATION_FACTORY_CONTEXT,
        west_lon_degree: f64,
        south_lat_degree: f64,
        east_lon_degree: f64,
        north_lat_degree: f64,
    );
}
unsafe extern "C" {
    pub fn proj_operation_factory_context_set_area_of_interest_name(
        ctx: *mut PJ_CONTEXT,
        factory_ctx: *mut PJ_OPERATION_FACTORY_CONTEXT,
        area_name: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn proj_operation_factory_context_set_crs_extent_use(
        ctx: *mut PJ_CONTEXT,
        factory_ctx: *mut PJ_OPERATION_FACTORY_CONTEXT,
        use_: PROJ_CRS_EXTENT_USE,
    );
}
unsafe extern "C" {
    pub fn proj_operation_factory_context_set_spatial_criterion(
        ctx: *mut PJ_CONTEXT,
        factory_ctx: *mut PJ_OPERATION_FACTORY_CONTEXT,
        criterion: PROJ_SPATIAL_CRITERION,
    );
}
unsafe extern "C" {
    pub fn proj_operation_factory_context_set_grid_availability_use(
        ctx: *mut PJ_CONTEXT,
        factory_ctx: *mut PJ_OPERATION_FACTORY_CONTEXT,
        use_: PROJ_GRID_AVAILABILITY_USE,
    );
}
unsafe extern "C" {
    pub fn proj_operation_factory_context_set_use_proj_alternative_grid_names(
        ctx: *mut PJ_CONTEXT,
        factory_ctx: *mut PJ_OPERATION_FACTORY_CONTEXT,
        usePROJNames: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn proj_operation_factory_context_set_allow_use_intermediate_crs(
        ctx: *mut PJ_CONTEXT,
        factory_ctx: *mut PJ_OPERATION_FACTORY_CONTEXT,
        use_: PROJ_INTERMEDIATE_CRS_USE,
    );
}
unsafe extern "C" {
    pub fn proj_operation_factory_context_set_allowed_intermediate_crs(
        ctx: *mut PJ_CONTEXT,
        factory_ctx: *mut PJ_OPERATION_FACTORY_CONTEXT,
        list_of_auth_name_codes: *const *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn proj_operation_factory_context_set_discard_superseded(
        ctx: *mut PJ_CONTEXT,
        factory_ctx: *mut PJ_OPERATION_FACTORY_CONTEXT,
        discard: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn proj_operation_factory_context_set_allow_ballpark_transformations(
        ctx: *mut PJ_CONTEXT,
        factory_ctx: *mut PJ_OPERATION_FACTORY_CONTEXT,
        allow: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn proj_create_operations(
        ctx: *mut PJ_CONTEXT,
        source_crs: *const PJ,
        target_crs: *const PJ,
        operationContext: *const PJ_OPERATION_FACTORY_CONTEXT,
    ) -> *mut PJ_OBJ_LIST;
}
unsafe extern "C" {
    pub fn proj_list_get_count(result: *const PJ_OBJ_LIST) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_list_get(
        ctx: *mut PJ_CONTEXT,
        result: *const PJ_OBJ_LIST,
        index: ::std::os::raw::c_int,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_list_destroy(result: *mut PJ_OBJ_LIST);
}
unsafe extern "C" {
    pub fn proj_get_suggested_operation(
        ctx: *mut PJ_CONTEXT,
        operations: *mut PJ_OBJ_LIST,
        direction: PJ_DIRECTION,
        coord: PJ_COORD,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_crs_is_derived(ctx: *mut PJ_CONTEXT, crs: *const PJ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_crs_get_geodetic_crs(ctx: *mut PJ_CONTEXT, crs: *const PJ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_crs_get_horizontal_datum(ctx: *mut PJ_CONTEXT, crs: *const PJ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_crs_get_sub_crs(
        ctx: *mut PJ_CONTEXT,
        crs: *const PJ,
        index: ::std::os::raw::c_int,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_crs_get_datum(ctx: *mut PJ_CONTEXT, crs: *const PJ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_crs_get_datum_ensemble(ctx: *mut PJ_CONTEXT, crs: *const PJ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_crs_get_datum_forced(ctx: *mut PJ_CONTEXT, crs: *const PJ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_crs_has_point_motion_operation(
        ctx: *mut PJ_CONTEXT,
        crs: *const PJ,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_datum_ensemble_get_member_count(
        ctx: *mut PJ_CONTEXT,
        datum_ensemble: *const PJ,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_datum_ensemble_get_accuracy(ctx: *mut PJ_CONTEXT, datum_ensemble: *const PJ)
        -> f64;
}
unsafe extern "C" {
    pub fn proj_datum_ensemble_get_member(
        ctx: *mut PJ_CONTEXT,
        datum_ensemble: *const PJ,
        member_index: ::std::os::raw::c_int,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_dynamic_datum_get_frame_reference_epoch(
        ctx: *mut PJ_CONTEXT,
        datum: *const PJ,
    ) -> f64;
}
unsafe extern "C" {
    pub fn proj_crs_get_coordinate_system(ctx: *mut PJ_CONTEXT, crs: *const PJ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_cs_get_type(ctx: *mut PJ_CONTEXT, cs: *const PJ) -> PJ_COORDINATE_SYSTEM_TYPE;
}
unsafe extern "C" {
    pub fn proj_cs_get_axis_count(ctx: *mut PJ_CONTEXT, cs: *const PJ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_cs_get_axis_info(
        ctx: *mut PJ_CONTEXT,
        cs: *const PJ,
        index: ::std::os::raw::c_int,
        out_name: *mut *const ::std::os::raw::c_char,
        out_abbrev: *mut *const ::std::os::raw::c_char,
        out_direction: *mut *const ::std::os::raw::c_char,
        out_unit_conv_factor: *mut f64,
        out_unit_name: *mut *const ::std::os::raw::c_char,
        out_unit_auth_name: *mut *const ::std::os::raw::c_char,
        out_unit_code: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_get_ellipsoid(ctx: *mut PJ_CONTEXT, obj: *const PJ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_ellipsoid_get_parameters(
        ctx: *mut PJ_CONTEXT,
        ellipsoid: *const PJ,
        out_semi_major_metre: *mut f64,
        out_semi_minor_metre: *mut f64,
        out_is_semi_minor_computed: *mut ::std::os::raw::c_int,
        out_inv_flattening: *mut f64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_get_celestial_body_name(
        ctx: *mut PJ_CONTEXT,
        obj: *const PJ,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn proj_get_prime_meridian(ctx: *mut PJ_CONTEXT, obj: *const PJ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_prime_meridian_get_parameters(
        ctx: *mut PJ_CONTEXT,
        prime_meridian: *const PJ,
        out_longitude: *mut f64,
        out_unit_conv_factor: *mut f64,
        out_unit_name: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_crs_get_coordoperation(ctx: *mut PJ_CONTEXT, crs: *const PJ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_coordoperation_get_method_info(
        ctx: *mut PJ_CONTEXT,
        coordoperation: *const PJ,
        out_method_name: *mut *const ::std::os::raw::c_char,
        out_method_auth_name: *mut *const ::std::os::raw::c_char,
        out_method_code: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_coordoperation_is_instantiable(
        ctx: *mut PJ_CONTEXT,
        coordoperation: *const PJ,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_coordoperation_has_ballpark_transformation(
        ctx: *mut PJ_CONTEXT,
        coordoperation: *const PJ,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_coordoperation_requires_per_coordinate_input_time(
        ctx: *mut PJ_CONTEXT,
        coordoperation: *const PJ,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_coordoperation_get_param_count(
        ctx: *mut PJ_CONTEXT,
        coordoperation: *const PJ,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_coordoperation_get_param_index(
        ctx: *mut PJ_CONTEXT,
        coordoperation: *const PJ,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_coordoperation_get_param(
        ctx: *mut PJ_CONTEXT,
        coordoperation: *const PJ,
        index: ::std::os::raw::c_int,
        out_name: *mut *const ::std::os::raw::c_char,
        out_auth_name: *mut *const ::std::os::raw::c_char,
        out_code: *mut *const ::std::os::raw::c_char,
        out_value: *mut f64,
        out_value_string: *mut *const ::std::os::raw::c_char,
        out_unit_conv_factor: *mut f64,
        out_unit_name: *mut *const ::std::os::raw::c_char,
        out_unit_auth_name: *mut *const ::std::os::raw::c_char,
        out_unit_code: *mut *const ::std::os::raw::c_char,
        out_unit_category: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_coordoperation_get_grid_used_count(
        ctx: *mut PJ_CONTEXT,
        coordoperation: *const PJ,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_coordoperation_get_grid_used(
        ctx: *mut PJ_CONTEXT,
        coordoperation: *const PJ,
        index: ::std::os::raw::c_int,
        out_short_name: *mut *const ::std::os::raw::c_char,
        out_full_name: *mut *const ::std::os::raw::c_char,
        out_package_name: *mut *const ::std::os::raw::c_char,
        out_url: *mut *const ::std::os::raw::c_char,
        out_direct_download: *mut ::std::os::raw::c_int,
        out_open_license: *mut ::std::os::raw::c_int,
        out_available: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_coordoperation_get_accuracy(ctx: *mut PJ_CONTEXT, obj: *const PJ) -> f64;
}
unsafe extern "C" {
    pub fn proj_coordoperation_get_towgs84_values(
        ctx: *mut PJ_CONTEXT,
        coordoperation: *const PJ,
        out_values: *mut f64,
        value_count: ::std::os::raw::c_int,
        emit_error_if_incompatible: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_coordoperation_create_inverse(ctx: *mut PJ_CONTEXT, obj: *const PJ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_concatoperation_get_step_count(
        ctx: *mut PJ_CONTEXT,
        concatoperation: *const PJ,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_concatoperation_get_step(
        ctx: *mut PJ_CONTEXT,
        concatoperation: *const PJ,
        i_step: ::std::os::raw::c_int,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_coordinate_metadata_create(
        ctx: *mut PJ_CONTEXT,
        crs: *const PJ,
        epoch: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_coordinate_metadata_get_epoch(ctx: *mut PJ_CONTEXT, obj: *const PJ) -> f64;
}
#[doc = " Angular unit of measure"]
pub const PJ_UNIT_TYPE_PJ_UT_ANGULAR: PJ_UNIT_TYPE = 0;
#[doc = " Linear unit of measure"]
pub const PJ_UNIT_TYPE_PJ_UT_LINEAR: PJ_UNIT_TYPE = 1;
#[doc = " Scale unit of measure"]
pub const PJ_UNIT_TYPE_PJ_UT_SCALE: PJ_UNIT_TYPE = 2;
#[doc = " Time unit of measure"]
pub const PJ_UNIT_TYPE_PJ_UT_TIME: PJ_UNIT_TYPE = 3;
#[doc = " Parametric unit of measure"]
pub const PJ_UNIT_TYPE_PJ_UT_PARAMETRIC: PJ_UNIT_TYPE = 4;
#[doc = " Type of unit of measure."]
pub type PJ_UNIT_TYPE = ::std::os::raw::c_uint;
#[doc = " \\brief Axis description."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJ_AXIS_DESCRIPTION {
    #[doc = " Axis name."]
    pub name: *mut ::std::os::raw::c_char,
    #[doc = " Axis abbreviation."]
    pub abbreviation: *mut ::std::os::raw::c_char,
    #[doc = " Axis direction."]
    pub direction: *mut ::std::os::raw::c_char,
    #[doc = " Axis unit name."]
    pub unit_name: *mut ::std::os::raw::c_char,
    #[doc = " Conversion factor to SI of the unit."]
    pub unit_conv_factor: f64,
    #[doc = " Type of unit"]
    pub unit_type: PJ_UNIT_TYPE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PJ_AXIS_DESCRIPTION"][::std::mem::size_of::<PJ_AXIS_DESCRIPTION>() - 48usize];
    ["Alignment of PJ_AXIS_DESCRIPTION"][::std::mem::align_of::<PJ_AXIS_DESCRIPTION>() - 8usize];
    ["Offset of field: PJ_AXIS_DESCRIPTION::name"]
        [::std::mem::offset_of!(PJ_AXIS_DESCRIPTION, name) - 0usize];
    ["Offset of field: PJ_AXIS_DESCRIPTION::abbreviation"]
        [::std::mem::offset_of!(PJ_AXIS_DESCRIPTION, abbreviation) - 8usize];
    ["Offset of field: PJ_AXIS_DESCRIPTION::direction"]
        [::std::mem::offset_of!(PJ_AXIS_DESCRIPTION, direction) - 16usize];
    ["Offset of field: PJ_AXIS_DESCRIPTION::unit_name"]
        [::std::mem::offset_of!(PJ_AXIS_DESCRIPTION, unit_name) - 24usize];
    ["Offset of field: PJ_AXIS_DESCRIPTION::unit_conv_factor"]
        [::std::mem::offset_of!(PJ_AXIS_DESCRIPTION, unit_conv_factor) - 32usize];
    ["Offset of field: PJ_AXIS_DESCRIPTION::unit_type"]
        [::std::mem::offset_of!(PJ_AXIS_DESCRIPTION, unit_type) - 40usize];
};
#[doc = " Easting-Norting"]
pub const PJ_CARTESIAN_CS_2D_TYPE_PJ_CART2D_EASTING_NORTHING: PJ_CARTESIAN_CS_2D_TYPE = 0;
#[doc = " Northing-Easting"]
pub const PJ_CARTESIAN_CS_2D_TYPE_PJ_CART2D_NORTHING_EASTING: PJ_CARTESIAN_CS_2D_TYPE = 1;
#[doc = " North Pole Easting/SOUTH-Norting/SOUTH"]
pub const PJ_CARTESIAN_CS_2D_TYPE_PJ_CART2D_NORTH_POLE_EASTING_SOUTH_NORTHING_SOUTH:
    PJ_CARTESIAN_CS_2D_TYPE = 2;
#[doc = " South Pole Easting/NORTH-Norting/NORTH"]
pub const PJ_CARTESIAN_CS_2D_TYPE_PJ_CART2D_SOUTH_POLE_EASTING_NORTH_NORTHING_NORTH:
    PJ_CARTESIAN_CS_2D_TYPE = 3;
#[doc = " Westing-southing"]
pub const PJ_CARTESIAN_CS_2D_TYPE_PJ_CART2D_WESTING_SOUTHING: PJ_CARTESIAN_CS_2D_TYPE = 4;
#[doc = " Type of Cartesian 2D coordinate system."]
pub type PJ_CARTESIAN_CS_2D_TYPE = ::std::os::raw::c_uint;
#[doc = " Longitude-Latitude"]
pub const PJ_ELLIPSOIDAL_CS_2D_TYPE_PJ_ELLPS2D_LONGITUDE_LATITUDE: PJ_ELLIPSOIDAL_CS_2D_TYPE = 0;
#[doc = " Latitude-Longitude"]
pub const PJ_ELLIPSOIDAL_CS_2D_TYPE_PJ_ELLPS2D_LATITUDE_LONGITUDE: PJ_ELLIPSOIDAL_CS_2D_TYPE = 1;
#[doc = " Type of Ellipsoidal 2D coordinate system."]
pub type PJ_ELLIPSOIDAL_CS_2D_TYPE = ::std::os::raw::c_uint;
#[doc = " Longitude-Latitude-Height(up)"]
pub const PJ_ELLIPSOIDAL_CS_3D_TYPE_PJ_ELLPS3D_LONGITUDE_LATITUDE_HEIGHT:
    PJ_ELLIPSOIDAL_CS_3D_TYPE = 0;
#[doc = " Latitude-Longitude-Height(up)"]
pub const PJ_ELLIPSOIDAL_CS_3D_TYPE_PJ_ELLPS3D_LATITUDE_LONGITUDE_HEIGHT:
    PJ_ELLIPSOIDAL_CS_3D_TYPE = 1;
#[doc = " Type of Ellipsoidal 3D coordinate system."]
pub type PJ_ELLIPSOIDAL_CS_3D_TYPE = ::std::os::raw::c_uint;
#[doc = " \\brief Description of a parameter value for a Conversion."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJ_PARAM_DESCRIPTION {
    #[doc = " Parameter name."]
    pub name: *const ::std::os::raw::c_char,
    #[doc = " Parameter authority name."]
    pub auth_name: *const ::std::os::raw::c_char,
    #[doc = " Parameter code."]
    pub code: *const ::std::os::raw::c_char,
    #[doc = " Parameter value."]
    pub value: f64,
    #[doc = " Name of unit in which parameter value is expressed."]
    pub unit_name: *const ::std::os::raw::c_char,
    #[doc = " Conversion factor to SI of the unit."]
    pub unit_conv_factor: f64,
    #[doc = " Type of unit"]
    pub unit_type: PJ_UNIT_TYPE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PJ_PARAM_DESCRIPTION"][::std::mem::size_of::<PJ_PARAM_DESCRIPTION>() - 56usize];
    ["Alignment of PJ_PARAM_DESCRIPTION"][::std::mem::align_of::<PJ_PARAM_DESCRIPTION>() - 8usize];
    ["Offset of field: PJ_PARAM_DESCRIPTION::name"]
        [::std::mem::offset_of!(PJ_PARAM_DESCRIPTION, name) - 0usize];
    ["Offset of field: PJ_PARAM_DESCRIPTION::auth_name"]
        [::std::mem::offset_of!(PJ_PARAM_DESCRIPTION, auth_name) - 8usize];
    ["Offset of field: PJ_PARAM_DESCRIPTION::code"]
        [::std::mem::offset_of!(PJ_PARAM_DESCRIPTION, code) - 16usize];
    ["Offset of field: PJ_PARAM_DESCRIPTION::value"]
        [::std::mem::offset_of!(PJ_PARAM_DESCRIPTION, value) - 24usize];
    ["Offset of field: PJ_PARAM_DESCRIPTION::unit_name"]
        [::std::mem::offset_of!(PJ_PARAM_DESCRIPTION, unit_name) - 32usize];
    ["Offset of field: PJ_PARAM_DESCRIPTION::unit_conv_factor"]
        [::std::mem::offset_of!(PJ_PARAM_DESCRIPTION, unit_conv_factor) - 40usize];
    ["Offset of field: PJ_PARAM_DESCRIPTION::unit_type"]
        [::std::mem::offset_of!(PJ_PARAM_DESCRIPTION, unit_type) - 48usize];
};
unsafe extern "C" {
    #[doc = " \\defgroup iso19111_advanced_functions Binding in C of advanced methods from\n the C++ API\n @{"]
    pub fn proj_create_cs(
        ctx: *mut PJ_CONTEXT,
        type_: PJ_COORDINATE_SYSTEM_TYPE,
        axis_count: ::std::os::raw::c_int,
        axis: *const PJ_AXIS_DESCRIPTION,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_cartesian_2D_cs(
        ctx: *mut PJ_CONTEXT,
        type_: PJ_CARTESIAN_CS_2D_TYPE,
        unit_name: *const ::std::os::raw::c_char,
        unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_ellipsoidal_2D_cs(
        ctx: *mut PJ_CONTEXT,
        type_: PJ_ELLIPSOIDAL_CS_2D_TYPE,
        unit_name: *const ::std::os::raw::c_char,
        unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_ellipsoidal_3D_cs(
        ctx: *mut PJ_CONTEXT,
        type_: PJ_ELLIPSOIDAL_CS_3D_TYPE,
        horizontal_angular_unit_name: *const ::std::os::raw::c_char,
        horizontal_angular_unit_conv_factor: f64,
        vertical_linear_unit_name: *const ::std::os::raw::c_char,
        vertical_linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_query_geodetic_crs_from_datum(
        ctx: *mut PJ_CONTEXT,
        crs_auth_name: *const ::std::os::raw::c_char,
        datum_auth_name: *const ::std::os::raw::c_char,
        datum_code: *const ::std::os::raw::c_char,
        crs_type: *const ::std::os::raw::c_char,
    ) -> *mut PJ_OBJ_LIST;
}
unsafe extern "C" {
    pub fn proj_create_geographic_crs(
        ctx: *mut PJ_CONTEXT,
        crs_name: *const ::std::os::raw::c_char,
        datum_name: *const ::std::os::raw::c_char,
        ellps_name: *const ::std::os::raw::c_char,
        semi_major_metre: f64,
        inv_flattening: f64,
        prime_meridian_name: *const ::std::os::raw::c_char,
        prime_meridian_offset: f64,
        pm_angular_units: *const ::std::os::raw::c_char,
        pm_units_conv: f64,
        ellipsoidal_cs: *const PJ,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_geographic_crs_from_datum(
        ctx: *mut PJ_CONTEXT,
        crs_name: *const ::std::os::raw::c_char,
        datum_or_datum_ensemble: *const PJ,
        ellipsoidal_cs: *const PJ,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_geocentric_crs(
        ctx: *mut PJ_CONTEXT,
        crs_name: *const ::std::os::raw::c_char,
        datum_name: *const ::std::os::raw::c_char,
        ellps_name: *const ::std::os::raw::c_char,
        semi_major_metre: f64,
        inv_flattening: f64,
        prime_meridian_name: *const ::std::os::raw::c_char,
        prime_meridian_offset: f64,
        angular_units: *const ::std::os::raw::c_char,
        angular_units_conv: f64,
        linear_units: *const ::std::os::raw::c_char,
        linear_units_conv: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_geocentric_crs_from_datum(
        ctx: *mut PJ_CONTEXT,
        crs_name: *const ::std::os::raw::c_char,
        datum_or_datum_ensemble: *const PJ,
        linear_units: *const ::std::os::raw::c_char,
        linear_units_conv: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_derived_geographic_crs(
        ctx: *mut PJ_CONTEXT,
        crs_name: *const ::std::os::raw::c_char,
        base_geographic_crs: *const PJ,
        conversion: *const PJ,
        ellipsoidal_cs: *const PJ,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_is_derived_crs(ctx: *mut PJ_CONTEXT, crs: *const PJ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn proj_alter_name(
        ctx: *mut PJ_CONTEXT,
        obj: *const PJ,
        name: *const ::std::os::raw::c_char,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_alter_id(
        ctx: *mut PJ_CONTEXT,
        obj: *const PJ,
        auth_name: *const ::std::os::raw::c_char,
        code: *const ::std::os::raw::c_char,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_crs_alter_geodetic_crs(
        ctx: *mut PJ_CONTEXT,
        obj: *const PJ,
        new_geod_crs: *const PJ,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_crs_alter_cs_angular_unit(
        ctx: *mut PJ_CONTEXT,
        obj: *const PJ,
        angular_units: *const ::std::os::raw::c_char,
        angular_units_conv: f64,
        unit_auth_name: *const ::std::os::raw::c_char,
        unit_code: *const ::std::os::raw::c_char,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_crs_alter_cs_linear_unit(
        ctx: *mut PJ_CONTEXT,
        obj: *const PJ,
        linear_units: *const ::std::os::raw::c_char,
        linear_units_conv: f64,
        unit_auth_name: *const ::std::os::raw::c_char,
        unit_code: *const ::std::os::raw::c_char,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_crs_alter_parameters_linear_unit(
        ctx: *mut PJ_CONTEXT,
        obj: *const PJ,
        linear_units: *const ::std::os::raw::c_char,
        linear_units_conv: f64,
        unit_auth_name: *const ::std::os::raw::c_char,
        unit_code: *const ::std::os::raw::c_char,
        convert_to_new_unit: ::std::os::raw::c_int,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_crs_promote_to_3D(
        ctx: *mut PJ_CONTEXT,
        crs_3D_name: *const ::std::os::raw::c_char,
        crs_2D: *const PJ,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_crs_create_projected_3D_crs_from_2D(
        ctx: *mut PJ_CONTEXT,
        crs_name: *const ::std::os::raw::c_char,
        projected_2D_crs: *const PJ,
        geog_3D_crs: *const PJ,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_crs_demote_to_2D(
        ctx: *mut PJ_CONTEXT,
        crs_2D_name: *const ::std::os::raw::c_char,
        crs_3D: *const PJ,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_engineering_crs(
        ctx: *mut PJ_CONTEXT,
        crsName: *const ::std::os::raw::c_char,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_vertical_crs(
        ctx: *mut PJ_CONTEXT,
        crs_name: *const ::std::os::raw::c_char,
        datum_name: *const ::std::os::raw::c_char,
        linear_units: *const ::std::os::raw::c_char,
        linear_units_conv: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_vertical_crs_ex(
        ctx: *mut PJ_CONTEXT,
        crs_name: *const ::std::os::raw::c_char,
        datum_name: *const ::std::os::raw::c_char,
        datum_auth_name: *const ::std::os::raw::c_char,
        datum_code: *const ::std::os::raw::c_char,
        linear_units: *const ::std::os::raw::c_char,
        linear_units_conv: f64,
        geoid_model_name: *const ::std::os::raw::c_char,
        geoid_model_auth_name: *const ::std::os::raw::c_char,
        geoid_model_code: *const ::std::os::raw::c_char,
        geoid_geog_crs: *const PJ,
        options: *const *const ::std::os::raw::c_char,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_compound_crs(
        ctx: *mut PJ_CONTEXT,
        crs_name: *const ::std::os::raw::c_char,
        horiz_crs: *const PJ,
        vert_crs: *const PJ,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion(
        ctx: *mut PJ_CONTEXT,
        name: *const ::std::os::raw::c_char,
        auth_name: *const ::std::os::raw::c_char,
        code: *const ::std::os::raw::c_char,
        method_name: *const ::std::os::raw::c_char,
        method_auth_name: *const ::std::os::raw::c_char,
        method_code: *const ::std::os::raw::c_char,
        param_count: ::std::os::raw::c_int,
        params: *const PJ_PARAM_DESCRIPTION,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_transformation(
        ctx: *mut PJ_CONTEXT,
        name: *const ::std::os::raw::c_char,
        auth_name: *const ::std::os::raw::c_char,
        code: *const ::std::os::raw::c_char,
        source_crs: *const PJ,
        target_crs: *const PJ,
        interpolation_crs: *const PJ,
        method_name: *const ::std::os::raw::c_char,
        method_auth_name: *const ::std::os::raw::c_char,
        method_code: *const ::std::os::raw::c_char,
        param_count: ::std::os::raw::c_int,
        params: *const PJ_PARAM_DESCRIPTION,
        accuracy: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_convert_conversion_to_other_method(
        ctx: *mut PJ_CONTEXT,
        conversion: *const PJ,
        new_method_epsg_code: ::std::os::raw::c_int,
        new_method_name: *const ::std::os::raw::c_char,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_projected_crs(
        ctx: *mut PJ_CONTEXT,
        crs_name: *const ::std::os::raw::c_char,
        geodetic_crs: *const PJ,
        conversion: *const PJ,
        coordinate_system: *const PJ,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_crs_create_bound_crs(
        ctx: *mut PJ_CONTEXT,
        base_crs: *const PJ,
        hub_crs: *const PJ,
        transformation: *const PJ,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_crs_create_bound_crs_to_WGS84(
        ctx: *mut PJ_CONTEXT,
        crs: *const PJ,
        options: *const *const ::std::os::raw::c_char,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_crs_create_bound_vertical_crs(
        ctx: *mut PJ_CONTEXT,
        vert_crs: *const PJ,
        hub_geographic_3D_crs: *const PJ,
        grid_name: *const ::std::os::raw::c_char,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_utm(
        ctx: *mut PJ_CONTEXT,
        zone: ::std::os::raw::c_int,
        north: ::std::os::raw::c_int,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_transverse_mercator(
        ctx: *mut PJ_CONTEXT,
        center_lat: f64,
        center_long: f64,
        scale: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_gauss_schreiber_transverse_mercator(
        ctx: *mut PJ_CONTEXT,
        center_lat: f64,
        center_long: f64,
        scale: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_transverse_mercator_south_oriented(
        ctx: *mut PJ_CONTEXT,
        center_lat: f64,
        center_long: f64,
        scale: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_two_point_equidistant(
        ctx: *mut PJ_CONTEXT,
        latitude_first_point: f64,
        longitude_first_point: f64,
        latitude_second_point: f64,
        longitude_secon_point: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_tunisia_mapping_grid(
        ctx: *mut PJ_CONTEXT,
        center_lat: f64,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_tunisia_mining_grid(
        ctx: *mut PJ_CONTEXT,
        center_lat: f64,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_albers_equal_area(
        ctx: *mut PJ_CONTEXT,
        latitude_false_origin: f64,
        longitude_false_origin: f64,
        latitude_first_parallel: f64,
        latitude_second_parallel: f64,
        easting_false_origin: f64,
        northing_false_origin: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_lambert_conic_conformal_1sp(
        ctx: *mut PJ_CONTEXT,
        center_lat: f64,
        center_long: f64,
        scale: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_lambert_conic_conformal_1sp_variant_b(
        ctx: *mut PJ_CONTEXT,
        latitude_nat_origin: f64,
        scale: f64,
        latitude_false_origin: f64,
        longitude_false_origin: f64,
        easting_false_origin: f64,
        northing_false_origin: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_lambert_conic_conformal_2sp(
        ctx: *mut PJ_CONTEXT,
        latitude_false_origin: f64,
        longitude_false_origin: f64,
        latitude_first_parallel: f64,
        latitude_second_parallel: f64,
        easting_false_origin: f64,
        northing_false_origin: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_lambert_conic_conformal_2sp_michigan(
        ctx: *mut PJ_CONTEXT,
        latitude_false_origin: f64,
        longitude_false_origin: f64,
        latitude_first_parallel: f64,
        latitude_second_parallel: f64,
        easting_false_origin: f64,
        northing_false_origin: f64,
        ellipsoid_scaling_factor: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_lambert_conic_conformal_2sp_belgium(
        ctx: *mut PJ_CONTEXT,
        latitude_false_origin: f64,
        longitude_false_origin: f64,
        latitude_first_parallel: f64,
        latitude_second_parallel: f64,
        easting_false_origin: f64,
        northing_false_origin: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_azimuthal_equidistant(
        ctx: *mut PJ_CONTEXT,
        latitude_nat_origin: f64,
        longitude_nat_origin: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_guam_projection(
        ctx: *mut PJ_CONTEXT,
        latitude_nat_origin: f64,
        longitude_nat_origin: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_bonne(
        ctx: *mut PJ_CONTEXT,
        latitude_nat_origin: f64,
        longitude_nat_origin: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_lambert_cylindrical_equal_area_spherical(
        ctx: *mut PJ_CONTEXT,
        latitude_first_parallel: f64,
        longitude_nat_origin: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_lambert_cylindrical_equal_area(
        ctx: *mut PJ_CONTEXT,
        latitude_first_parallel: f64,
        longitude_nat_origin: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_cassini_soldner(
        ctx: *mut PJ_CONTEXT,
        center_lat: f64,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_equidistant_conic(
        ctx: *mut PJ_CONTEXT,
        center_lat: f64,
        center_long: f64,
        latitude_first_parallel: f64,
        latitude_second_parallel: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_eckert_i(
        ctx: *mut PJ_CONTEXT,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_eckert_ii(
        ctx: *mut PJ_CONTEXT,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_eckert_iii(
        ctx: *mut PJ_CONTEXT,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_eckert_iv(
        ctx: *mut PJ_CONTEXT,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_eckert_v(
        ctx: *mut PJ_CONTEXT,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_eckert_vi(
        ctx: *mut PJ_CONTEXT,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_equidistant_cylindrical(
        ctx: *mut PJ_CONTEXT,
        latitude_first_parallel: f64,
        longitude_nat_origin: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_equidistant_cylindrical_spherical(
        ctx: *mut PJ_CONTEXT,
        latitude_first_parallel: f64,
        longitude_nat_origin: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_gall(
        ctx: *mut PJ_CONTEXT,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_goode_homolosine(
        ctx: *mut PJ_CONTEXT,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_interrupted_goode_homolosine(
        ctx: *mut PJ_CONTEXT,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_geostationary_satellite_sweep_x(
        ctx: *mut PJ_CONTEXT,
        center_long: f64,
        height: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_geostationary_satellite_sweep_y(
        ctx: *mut PJ_CONTEXT,
        center_long: f64,
        height: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_gnomonic(
        ctx: *mut PJ_CONTEXT,
        center_lat: f64,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_hotine_oblique_mercator_variant_a(
        ctx: *mut PJ_CONTEXT,
        latitude_projection_centre: f64,
        longitude_projection_centre: f64,
        azimuth_initial_line: f64,
        angle_from_rectified_to_skrew_grid: f64,
        scale: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_hotine_oblique_mercator_variant_b(
        ctx: *mut PJ_CONTEXT,
        latitude_projection_centre: f64,
        longitude_projection_centre: f64,
        azimuth_initial_line: f64,
        angle_from_rectified_to_skrew_grid: f64,
        scale: f64,
        easting_projection_centre: f64,
        northing_projection_centre: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_hotine_oblique_mercator_two_point_natural_origin(
        ctx: *mut PJ_CONTEXT,
        latitude_projection_centre: f64,
        latitude_point1: f64,
        longitude_point1: f64,
        latitude_point2: f64,
        longitude_point2: f64,
        scale: f64,
        easting_projection_centre: f64,
        northing_projection_centre: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_laborde_oblique_mercator(
        ctx: *mut PJ_CONTEXT,
        latitude_projection_centre: f64,
        longitude_projection_centre: f64,
        azimuth_initial_line: f64,
        scale: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_international_map_world_polyconic(
        ctx: *mut PJ_CONTEXT,
        center_long: f64,
        latitude_first_parallel: f64,
        latitude_second_parallel: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_krovak_north_oriented(
        ctx: *mut PJ_CONTEXT,
        latitude_projection_centre: f64,
        longitude_of_origin: f64,
        colatitude_cone_axis: f64,
        latitude_pseudo_standard_parallel: f64,
        scale_factor_pseudo_standard_parallel: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_krovak(
        ctx: *mut PJ_CONTEXT,
        latitude_projection_centre: f64,
        longitude_of_origin: f64,
        colatitude_cone_axis: f64,
        latitude_pseudo_standard_parallel: f64,
        scale_factor_pseudo_standard_parallel: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_lambert_azimuthal_equal_area(
        ctx: *mut PJ_CONTEXT,
        latitude_nat_origin: f64,
        longitude_nat_origin: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_miller_cylindrical(
        ctx: *mut PJ_CONTEXT,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_mercator_variant_a(
        ctx: *mut PJ_CONTEXT,
        center_lat: f64,
        center_long: f64,
        scale: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_mercator_variant_b(
        ctx: *mut PJ_CONTEXT,
        latitude_first_parallel: f64,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_popular_visualisation_pseudo_mercator(
        ctx: *mut PJ_CONTEXT,
        center_lat: f64,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_mollweide(
        ctx: *mut PJ_CONTEXT,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_new_zealand_mapping_grid(
        ctx: *mut PJ_CONTEXT,
        center_lat: f64,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_oblique_stereographic(
        ctx: *mut PJ_CONTEXT,
        center_lat: f64,
        center_long: f64,
        scale: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_orthographic(
        ctx: *mut PJ_CONTEXT,
        center_lat: f64,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_local_orthographic(
        ctx: *mut PJ_CONTEXT,
        center_lat: f64,
        center_long: f64,
        azimuth: f64,
        scale: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_american_polyconic(
        ctx: *mut PJ_CONTEXT,
        center_lat: f64,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_polar_stereographic_variant_a(
        ctx: *mut PJ_CONTEXT,
        center_lat: f64,
        center_long: f64,
        scale: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_polar_stereographic_variant_b(
        ctx: *mut PJ_CONTEXT,
        latitude_standard_parallel: f64,
        longitude_of_origin: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_robinson(
        ctx: *mut PJ_CONTEXT,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_sinusoidal(
        ctx: *mut PJ_CONTEXT,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_stereographic(
        ctx: *mut PJ_CONTEXT,
        center_lat: f64,
        center_long: f64,
        scale: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_van_der_grinten(
        ctx: *mut PJ_CONTEXT,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_wagner_i(
        ctx: *mut PJ_CONTEXT,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_wagner_ii(
        ctx: *mut PJ_CONTEXT,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_wagner_iii(
        ctx: *mut PJ_CONTEXT,
        latitude_true_scale: f64,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_wagner_iv(
        ctx: *mut PJ_CONTEXT,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_wagner_v(
        ctx: *mut PJ_CONTEXT,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_wagner_vi(
        ctx: *mut PJ_CONTEXT,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_wagner_vii(
        ctx: *mut PJ_CONTEXT,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_quadrilateralized_spherical_cube(
        ctx: *mut PJ_CONTEXT,
        center_lat: f64,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_spherical_cross_track_height(
        ctx: *mut PJ_CONTEXT,
        peg_point_lat: f64,
        peg_point_long: f64,
        peg_point_heading: f64,
        peg_point_height: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_equal_earth(
        ctx: *mut PJ_CONTEXT,
        center_long: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_vertical_perspective(
        ctx: *mut PJ_CONTEXT,
        topo_origin_lat: f64,
        topo_origin_long: f64,
        topo_origin_height: f64,
        view_point_height: f64,
        false_easting: f64,
        false_northing: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
        linear_unit_name: *const ::std::os::raw::c_char,
        linear_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_pole_rotation_grib_convention(
        ctx: *mut PJ_CONTEXT,
        south_pole_lat_in_unrotated_crs: f64,
        south_pole_long_in_unrotated_crs: f64,
        axis_rotation: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
    ) -> *mut PJ;
}
unsafe extern "C" {
    pub fn proj_create_conversion_pole_rotation_netcdf_cf_convention(
        ctx: *mut PJ_CONTEXT,
        grid_north_pole_latitude: f64,
        grid_north_pole_longitude: f64,
        north_pole_grid_longitude: f64,
        ang_unit_name: *const ::std::os::raw::c_char,
        ang_unit_conv_factor: f64,
    ) -> *mut PJ;
}
